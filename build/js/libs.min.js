!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(k,t){"use strict";function m(t){return null!=t&&t===t.window}var e=[],T=k.document,o=Object.getPrototypeOf,a=e.slice,g=e.concat,l=e.push,n=e.indexOf,i={},s=i.toString,v=i.hasOwnProperty,r=v.toString,c=r.call(Object),y={},_=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},d={type:!0,src:!0,nonce:!0,noModule:!0};function b(t,e,i){var o,n,s=(i=i||T).createElement("script");if(s.text=t,e)for(o in d)(n=e[o]||e.getAttribute&&e.getAttribute(o))&&s.setAttribute(o,n);i.head.appendChild(s).parentNode.removeChild(s)}function x(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?i[s.call(t)]||"object":typeof t}var p="3.4.1",S=function(t,e){return new S.fn.init(t,e)},h=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function u(t){var e=!!t&&"length"in t&&t.length,i=x(t);return!_(t)&&!m(t)&&("array"===i||0===e||"number"==typeof e&&0<e&&e-1 in t)}S.fn=S.prototype={jquery:p,constructor:S,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=S.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return S.each(this,t)},map:function(i){return this.pushStack(S.map(this,function(t,e){return i.call(t,e,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(0<=i&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:e.sort,splice:e.splice},S.extend=S.fn.extend=function(){var t,e,i,o,n,s,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||_(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)o=t[e],"__proto__"!==e&&r!==o&&(c&&o&&(S.isPlainObject(o)||(n=Array.isArray(o)))?(i=r[e],s=n&&!Array.isArray(i)?[]:n||S.isPlainObject(i)?i:{},n=!1,r[e]=S.extend(c,s,o)):void 0!==o&&(r[e]=o));return r},S.extend({expando:"jQuery"+(p+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==s.call(t))&&(!(e=o(t))||"function"==typeof(i=v.call(e,"constructor")&&e.constructor)&&r.call(i)===c)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e){b(t,{nonce:e&&e.nonce})},each:function(t,e){var i,o=0;if(u(t))for(i=t.length;o<i&&!1!==e.call(t[o],o,t[o]);o++);else for(o in t)if(!1===e.call(t[o],o,t[o]))break;return t},trim:function(t){return null==t?"":(t+"").replace(h,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(u(Object(t))?S.merge(i,"string"==typeof t?[t]:t):l.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:n.call(e,t,i)},merge:function(t,e){for(var i=+e.length,o=0,n=t.length;o<i;o++)t[n++]=e[o];return t.length=n,t},grep:function(t,e,i){for(var o=[],n=0,s=t.length,r=!i;n<s;n++)!e(t[n],n)!=r&&o.push(t[n]);return o},map:function(t,e,i){var o,n,s=0,r=[];if(u(t))for(o=t.length;s<o;s++)null!=(n=e(t[s],s,i))&&r.push(n);else for(s in t)null!=(n=e(t[s],s,i))&&r.push(n);return g.apply([],r)},guid:1,support:y}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=e[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){i["[object "+e+"]"]=e.toLowerCase()});var f=function(i){function p(t,e,i){var o="0x"+e-65536;return o!=o||i?e:o<0?String.fromCharCode(65536+o):String.fromCharCode(o>>10|55296,1023&o|56320)}function n(){w()}var t,u,b,s,r,f,h,m,x,l,c,w,k,a,T,g,d,v,y,S="sizzle"+1*new Date,_=i.document,$=0,o=0,C=lt(),A=lt(),E=lt(),D=lt(),j=function(t,e){return t===e&&(c=!0),0},N={}.hasOwnProperty,e=[],P=e.pop,O=e.push,L=e.push,M=e.slice,F=function(t,e){for(var i=0,o=t.length;i<o;i++)if(t[i]===e)return i;return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",q="[\\x20\\t\\r\\n\\f]",I="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",W="\\["+q+"*("+I+")(?:"+q+"*([*^$|!~]?=)"+q+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+q+"*\\]",z=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",R=new RegExp(q+"+","g"),B=new RegExp("^"+q+"+|((?:^|[^\\\\])(?:\\\\.)*)"+q+"+$","g"),U=new RegExp("^"+q+"*,"+q+"*"),X=new RegExp("^"+q+"*([>+~]|"+q+")"+q+"*"),V=new RegExp(q+"|>"),Y=new RegExp(z),G=new RegExp("^"+I+"$"),Q={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+q+"*(even|odd|(([+-]|)(\\d*)n|)"+q+"*(?:([+-]|)"+q+"*(\\d+)|))"+q+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+q+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+q+"*((?:-\\d)?\\d*)"+q+"*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,tt=/^[^{]+\{\s*\[native \w/,et=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,it=/[+~]/,ot=new RegExp("\\\\([\\da-f]{1,6}"+q+"?|("+q+")|.)","ig"),nt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,st=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=bt(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{L.apply(e=M.call(_.childNodes),_.childNodes),e[_.childNodes.length].nodeType}catch(t){L={apply:e.length?function(t,e){O.apply(t,M.call(e))}:function(t,e){for(var i=t.length,o=0;t[i++]=e[o++];);t.length=i-1}}}function at(e,t,i,o){var n,s,r,a,l,c,d,p=t&&t.ownerDocument,h=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return i;if(!o&&((t?t.ownerDocument||t:_)!==k&&w(t),t=t||k,T)){if(11!==h&&(l=et.exec(e)))if(n=l[1]){if(9===h){if(!(r=t.getElementById(n)))return i;if(r.id===n)return i.push(r),i}else if(p&&(r=p.getElementById(n))&&y(t,r)&&r.id===n)return i.push(r),i}else{if(l[2])return L.apply(i,t.getElementsByTagName(e)),i;if((n=l[3])&&u.getElementsByClassName&&t.getElementsByClassName)return L.apply(i,t.getElementsByClassName(n)),i}if(u.qsa&&!D[e+" "]&&(!g||!g.test(e))&&(1!==h||"object"!==t.nodeName.toLowerCase())){if(d=e,p=t,1===h&&V.test(e)){for((a=t.getAttribute("id"))?a=a.replace(nt,st):t.setAttribute("id",a=S),s=(c=f(e)).length;s--;)c[s]="#"+a+" "+_t(c[s]);d=c.join(","),p=it.test(e)&&vt(t.parentNode)||t}try{return L.apply(i,p.querySelectorAll(d)),i}catch(t){D(e,!0)}finally{a===S&&t.removeAttribute("id")}}}return m(e.replace(B,"$1"),t,i,o)}function lt(){var o=[];return function t(e,i){return o.push(e+" ")>b.cacheLength&&delete t[o.shift()],t[e+" "]=i}}function ct(t){return t[S]=!0,t}function dt(t){var e=k.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function pt(t,e){for(var i=t.split("|"),o=i.length;o--;)b.attrHandle[i[o]]=e}function ht(t,e){var i=e&&t,o=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(o)return o;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function ut(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function ft(i){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===i}}function mt(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&rt(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function gt(r){return ct(function(s){return s=+s,ct(function(t,e){for(var i,o=r([],t.length,s),n=o.length;n--;)t[i=o[n]]&&(t[i]=!(e[i]=t[i]))})})}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in u=at.support={},r=at.isXML=function(t){var e=t.namespaceURI,i=(t.ownerDocument||t).documentElement;return!K.test(e||i&&i.nodeName||"HTML")},w=at.setDocument=function(t){var e,i,o=t?t.ownerDocument||t:_;return o!==k&&9===o.nodeType&&o.documentElement&&(a=(k=o).documentElement,T=!r(k),_!==k&&(i=k.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",n,!1):i.attachEvent&&i.attachEvent("onunload",n)),u.attributes=dt(function(t){return t.className="i",!t.getAttribute("className")}),u.getElementsByTagName=dt(function(t){return t.appendChild(k.createComment("")),!t.getElementsByTagName("*").length}),u.getElementsByClassName=tt.test(k.getElementsByClassName),u.getById=dt(function(t){return a.appendChild(t).id=S,!k.getElementsByName||!k.getElementsByName(S).length}),u.getById?(b.filter.ID=function(t){var e=t.replace(ot,p);return function(t){return t.getAttribute("id")===e}},b.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var i=e.getElementById(t);return i?[i]:[]}}):(b.filter.ID=function(t){var i=t.replace(ot,p);return function(t){var e=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return e&&e.value===i}},b.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var i,o,n,s=e.getElementById(t);if(s){if((i=s.getAttributeNode("id"))&&i.value===t)return[s];for(n=e.getElementsByName(t),o=0;s=n[o++];)if((i=s.getAttributeNode("id"))&&i.value===t)return[s]}return[]}}),b.find.TAG=u.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):u.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,o=[],n=0,s=e.getElementsByTagName(t);if("*"!==t)return s;for(;i=s[n++];)1===i.nodeType&&o.push(i);return o},b.find.CLASS=u.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&T)return e.getElementsByClassName(t)},d=[],g=[],(u.qsa=tt.test(k.querySelectorAll))&&(dt(function(t){a.appendChild(t).innerHTML="<a id='"+S+"'></a><select id='"+S+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+q+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||g.push("\\["+q+"*(?:value|"+H+")"),t.querySelectorAll("[id~="+S+"-]").length||g.push("~="),t.querySelectorAll(":checked").length||g.push(":checked"),t.querySelectorAll("a#"+S+"+*").length||g.push(".#.+[+~]")}),dt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=k.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&g.push("name"+q+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),a.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),g.push(",.*:")})),(u.matchesSelector=tt.test(v=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&dt(function(t){u.disconnectedMatch=v.call(t,"*"),v.call(t,"[s!='']:x"),d.push("!=",z)}),g=g.length&&new RegExp(g.join("|")),d=d.length&&new RegExp(d.join("|")),e=tt.test(a.compareDocumentPosition),y=e||tt.test(a.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,o=e&&e.parentNode;return t===o||!(!o||1!==o.nodeType||!(i.contains?i.contains(o):t.compareDocumentPosition&&16&t.compareDocumentPosition(o)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},j=e?function(t,e){if(t===e)return c=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!u.sortDetached&&e.compareDocumentPosition(t)===i?t===k||t.ownerDocument===_&&y(_,t)?-1:e===k||e.ownerDocument===_&&y(_,e)?1:l?F(l,t)-F(l,e):0:4&i?-1:1)}:function(t,e){if(t===e)return c=!0,0;var i,o=0,n=t.parentNode,s=e.parentNode,r=[t],a=[e];if(!n||!s)return t===k?-1:e===k?1:n?-1:s?1:l?F(l,t)-F(l,e):0;if(n===s)return ht(t,e);for(i=t;i=i.parentNode;)r.unshift(i);for(i=e;i=i.parentNode;)a.unshift(i);for(;r[o]===a[o];)o++;return o?ht(r[o],a[o]):r[o]===_?-1:a[o]===_?1:0}),k},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if((t.ownerDocument||t)!==k&&w(t),u.matchesSelector&&T&&!D[e+" "]&&(!d||!d.test(e))&&(!g||!g.test(e)))try{var i=v.call(t,e);if(i||u.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){D(e,!0)}return 0<at(e,k,null,[t]).length},at.contains=function(t,e){return(t.ownerDocument||t)!==k&&w(t),y(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!==k&&w(t);var i=b.attrHandle[e.toLowerCase()],o=i&&N.call(b.attrHandle,e.toLowerCase())?i(t,e,!T):void 0;return void 0!==o?o:u.attributes||!T?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},at.escape=function(t){return(t+"").replace(nt,st)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,i=[],o=0,n=0;if(c=!u.detectDuplicates,l=!u.sortStable&&t.slice(0),t.sort(j),c){for(;e=t[n++];)e===t[n]&&(o=i.push(n));for(;o--;)t.splice(i[o],1)}return l=null,t},s=at.getText=function(t){var e,i="",o=0,n=t.nodeType;if(n){if(1===n||9===n||11===n){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=s(t)}else if(3===n||4===n)return t.nodeValue}else for(;e=t[o++];)i+=s(e);return i},(b=at.selectors={cacheLength:50,createPseudo:ct,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(ot,p),t[3]=(t[3]||t[4]||t[5]||"").replace(ot,p),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return Q.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&Y.test(i)&&(e=f(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(ot,p).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=C[t+" "];return e||(e=new RegExp("(^|"+q+")"+t+"("+q+"|$)"))&&C(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(i,o,n){return function(t){var e=at.attr(t,i);return null==e?"!="===o:!o||(e+="","="===o?e===n:"!="===o?e!==n:"^="===o?n&&0===e.indexOf(n):"*="===o?n&&-1<e.indexOf(n):"$="===o?n&&e.slice(-n.length)===n:"~="===o?-1<(" "+e.replace(R," ")+" ").indexOf(n):"|="===o&&(e===n||e.slice(0,n.length+1)===n+"-"))}},CHILD:function(f,t,e,m,g){var v="nth"!==f.slice(0,3),y="last"!==f.slice(-4),_="of-type"===t;return 1===m&&0===g?function(t){return!!t.parentNode}:function(t,e,i){var o,n,s,r,a,l,c=v!=y?"nextSibling":"previousSibling",d=t.parentNode,p=_&&t.nodeName.toLowerCase(),h=!i&&!_,u=!1;if(d){if(v){for(;c;){for(r=t;r=r[c];)if(_?r.nodeName.toLowerCase()===p:1===r.nodeType)return!1;l=c="only"===f&&!l&&"nextSibling"}return!0}if(l=[y?d.firstChild:d.lastChild],y&&h){for(u=(a=(o=(n=(s=(r=d)[S]||(r[S]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]||[])[0]===$&&o[1])&&o[2],r=a&&d.childNodes[a];r=++a&&r&&r[c]||(u=a=0)||l.pop();)if(1===r.nodeType&&++u&&r===t){n[f]=[$,a,u];break}}else if(h&&(u=a=(o=(n=(s=(r=t)[S]||(r[S]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]||[])[0]===$&&o[1]),!1===u)for(;(r=++a&&r&&r[c]||(u=a=0)||l.pop())&&((_?r.nodeName.toLowerCase()!==p:1!==r.nodeType)||!++u||(h&&((n=(s=r[S]||(r[S]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]=[$,u]),r!==t)););return(u-=g)===m||u%m==0&&0<=u/m}}},PSEUDO:function(t,s){var e,r=b.pseudos[t]||b.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return r[S]?r(s):1<r.length?(e=[t,t,"",s],b.setFilters.hasOwnProperty(t.toLowerCase())?ct(function(t,e){for(var i,o=r(t,s),n=o.length;n--;)t[i=F(t,o[n])]=!(e[i]=o[n])}):function(t){return r(t,0,e)}):r}},pseudos:{not:ct(function(t){var o=[],n=[],a=h(t.replace(B,"$1"));return a[S]?ct(function(t,e,i,o){for(var n,s=a(t,null,o,[]),r=t.length;r--;)(n=s[r])&&(t[r]=!(e[r]=n))}):function(t,e,i){return o[0]=t,a(o,null,i,n),o[0]=null,!n.pop()}}),has:ct(function(e){return function(t){return 0<at(e,t).length}}),contains:ct(function(e){return e=e.replace(ot,p),function(t){return-1<(t.textContent||s(t)).indexOf(e)}}),lang:ct(function(i){return G.test(i||"")||at.error("unsupported lang: "+i),i=i.replace(ot,p).toLowerCase(),function(t){var e;do{if(e=T?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===i||0===e.indexOf(i+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=i.location&&i.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===a},focus:function(t){return t===k.activeElement&&(!k.hasFocus||k.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:mt(!1),disabled:mt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!b.pseudos.empty(t)},header:function(t){return Z.test(t.nodeName)},input:function(t){return J.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:gt(function(){return[0]}),last:gt(function(t,e){return[e-1]}),eq:gt(function(t,e,i){return[i<0?i+e:i]}),even:gt(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:gt(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:gt(function(t,e,i){for(var o=i<0?i+e:e<i?e:i;0<=--o;)t.push(o);return t}),gt:gt(function(t,e,i){for(var o=i<0?i+e:i;++o<e;)t.push(o);return t})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[t]=ut(t);for(t in{submit:!0,reset:!0})b.pseudos[t]=ft(t);function yt(){}function _t(t){for(var e=0,i=t.length,o="";e<i;e++)o+=t[e].value;return o}function bt(a,t,e){var l=t.dir,c=t.next,d=c||l,p=e&&"parentNode"===d,h=o++;return t.first?function(t,e,i){for(;t=t[l];)if(1===t.nodeType||p)return a(t,e,i);return!1}:function(t,e,i){var o,n,s,r=[$,h];if(i){for(;t=t[l];)if((1===t.nodeType||p)&&a(t,e,i))return!0}else for(;t=t[l];)if(1===t.nodeType||p)if(n=(s=t[S]||(t[S]={}))[t.uniqueID]||(s[t.uniqueID]={}),c&&c===t.nodeName.toLowerCase())t=t[l]||t;else{if((o=n[d])&&o[0]===$&&o[1]===h)return r[2]=o[2];if((n[d]=r)[2]=a(t,e,i))return!0}return!1}}function xt(n){return 1<n.length?function(t,e,i){for(var o=n.length;o--;)if(!n[o](t,e,i))return!1;return!0}:n[0]}function wt(t,e,i,o,n){for(var s,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(s=t[a])&&(i&&!i(s,o,n)||(r.push(s),c&&e.push(a)));return r}function kt(u,f,m,g,v,t){return g&&!g[S]&&(g=kt(g)),v&&!v[S]&&(v=kt(v,t)),ct(function(t,e,i,o){var n,s,r,a=[],l=[],c=e.length,d=t||function(t,e,i){for(var o=0,n=e.length;o<n;o++)at(t,e[o],i);return i}(f||"*",i.nodeType?[i]:i,[]),p=!u||!t&&f?d:wt(d,a,u,i,o),h=m?v||(t?u:c||g)?[]:e:p;if(m&&m(p,h,i,o),g)for(n=wt(h,l),g(n,[],i,o),s=n.length;s--;)(r=n[s])&&(h[l[s]]=!(p[l[s]]=r));if(t){if(v||u){if(v){for(n=[],s=h.length;s--;)(r=h[s])&&n.push(p[s]=r);v(null,h=[],n,o)}for(s=h.length;s--;)(r=h[s])&&-1<(n=v?F(t,r):a[s])&&(t[n]=!(e[n]=r))}}else h=wt(h===e?h.splice(c,h.length):h),v?v(null,e,h,o):L.apply(e,h)})}function Tt(t){for(var n,e,i,o=t.length,s=b.relative[t[0].type],r=s||b.relative[" "],a=s?1:0,l=bt(function(t){return t===n},r,!0),c=bt(function(t){return-1<F(n,t)},r,!0),d=[function(t,e,i){var o=!s&&(i||e!==x)||((n=e).nodeType?l(t,e,i):c(t,e,i));return n=null,o}];a<o;a++)if(e=b.relative[t[a].type])d=[bt(xt(d),e)];else{if((e=b.filter[t[a].type].apply(null,t[a].matches))[S]){for(i=++a;i<o&&!b.relative[t[i].type];i++);return kt(1<a&&xt(d),1<a&&_t(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(B,"$1"),e,a<i&&Tt(t.slice(a,i)),i<o&&Tt(t=t.slice(i)),i<o&&_t(t))}d.push(e)}return xt(d)}function St(g,v){function t(t,e,i,o,n){var s,r,a,l=0,c="0",d=t&&[],p=[],h=x,u=t||_&&b.find.TAG("*",n),f=$+=null==h?1:Math.random()||.1,m=u.length;for(n&&(x=e===k||e||n);c!==m&&null!=(s=u[c]);c++){if(_&&s){for(r=0,e||s.ownerDocument===k||(w(s),i=!T);a=g[r++];)if(a(s,e||k,i)){o.push(s);break}n&&($=f)}y&&((s=!a&&s)&&l--,t&&d.push(s))}if(l+=c,y&&c!==l){for(r=0;a=v[r++];)a(d,p,e,i);if(t){if(0<l)for(;c--;)d[c]||p[c]||(p[c]=P.call(o));p=wt(p)}L.apply(o,p),n&&!t&&0<p.length&&1<l+v.length&&at.uniqueSort(o)}return n&&($=f,x=h),d}var y=0<v.length,_=0<g.length;return y?ct(t):t}return yt.prototype=b.filters=b.pseudos,b.setFilters=new yt,f=at.tokenize=function(t,e){var i,o,n,s,r,a,l,c=A[t+" "];if(c)return e?0:c.slice(0);for(r=t,a=[],l=b.preFilter;r;){for(s in i&&!(o=U.exec(r))||(o&&(r=r.slice(o[0].length)||r),a.push(n=[])),i=!1,(o=X.exec(r))&&(i=o.shift(),n.push({value:i,type:o[0].replace(B," ")}),r=r.slice(i.length)),b.filter)!(o=Q[s].exec(r))||l[s]&&!(o=l[s](o))||(i=o.shift(),n.push({value:i,type:s,matches:o}),r=r.slice(i.length));if(!i)break}return e?r.length:r?at.error(t):A(t,a).slice(0)},h=at.compile=function(t,e){var i,o=[],n=[],s=E[t+" "];if(!s){for(i=(e=e||f(t)).length;i--;)(s=Tt(e[i]))[S]?o.push(s):n.push(s);(s=E(t,St(n,o))).selector=t}return s},m=at.select=function(t,e,i,o){var n,s,r,a,l,c="function"==typeof t&&t,d=!o&&f(t=c.selector||t);if(i=i||[],1===d.length){if(2<(s=d[0]=d[0].slice(0)).length&&"ID"===(r=s[0]).type&&9===e.nodeType&&T&&b.relative[s[1].type]){if(!(e=(b.find.ID(r.matches[0].replace(ot,p),e)||[])[0]))return i;c&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(n=Q.needsContext.test(t)?0:s.length;n--&&(r=s[n],!b.relative[a=r.type]);)if((l=b.find[a])&&(o=l(r.matches[0].replace(ot,p),it.test(s[0].type)&&vt(e.parentNode)||e))){if(s.splice(n,1),!(t=o.length&&_t(s)))return L.apply(i,o),i;break}}return(c||h(t,d))(o,e,!T,i,!e||it.test(t)&&vt(e.parentNode)||e),i},u.sortStable=S.split("").sort(j).join("")===S,u.detectDuplicates=!!c,w(),u.sortDetached=dt(function(t){return 1&t.compareDocumentPosition(k.createElement("fieldset"))}),dt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||pt("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),u.attributes&&dt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||pt("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),dt(function(t){return null==t.getAttribute("disabled")})||pt(H,function(t,e,i){var o;if(!i)return!0===t[e]?e.toLowerCase():(o=t.getAttributeNode(e))&&o.specified?o.value:null}),at}(k);S.find=f,S.expr=f.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=f.uniqueSort,S.text=f.getText,S.isXMLDoc=f.isXML,S.contains=f.contains,S.escapeSelector=f.escape;function w(t,e,i){for(var o=[],n=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(n&&S(t).is(i))break;o.push(t)}return o}function $(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i}var C=S.expr.match.needsContext;function A(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var E=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(t,i,o){return _(i)?S.grep(t,function(t,e){return!!i.call(t,e,t)!==o}):i.nodeType?S.grep(t,function(t){return t===i!==o}):"string"!=typeof i?S.grep(t,function(t){return-1<n.call(i,t)!==o}):S.filter(i,t,o)}S.filter=function(t,e,i){var o=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===o.nodeType?S.find.matchesSelector(o,t)?[o]:[]:S.find.matches(t,S.grep(e,function(t){return 1===t.nodeType}))},S.fn.extend({find:function(t){var e,i,o=this.length,n=this;if("string"!=typeof t)return this.pushStack(S(t).filter(function(){for(e=0;e<o;e++)if(S.contains(n[e],this))return!0}));for(i=this.pushStack([]),e=0;e<o;e++)S.find(t,n[e],i);return 1<o?S.uniqueSort(i):i},filter:function(t){return this.pushStack(D(this,t||[],!1))},not:function(t){return this.pushStack(D(this,t||[],!0))},is:function(t){return!!D(this,"string"==typeof t&&C.test(t)?S(t):t||[],!1).length}});var j,N=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(t,e,i){var o,n;if(!t)return this;if(i=i||j,"string"!=typeof t)return t.nodeType?(this[0]=t,this.length=1,this):_(t)?void 0!==i.ready?i.ready(t):t(S):S.makeArray(t,this);if(!(o="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:N.exec(t))||!o[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(o[1]){if(e=e instanceof S?e[0]:e,S.merge(this,S.parseHTML(o[1],e&&e.nodeType?e.ownerDocument||e:T,!0)),E.test(o[1])&&S.isPlainObject(e))for(o in e)_(this[o])?this[o](e[o]):this.attr(o,e[o]);return this}return(n=T.getElementById(o[2]))&&(this[0]=n,this.length=1),this}).prototype=S.fn,j=S(T);var P=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function L(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}S.fn.extend({has:function(t){var e=S(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(S.contains(this,e[t]))return!0})},closest:function(t,e){var i,o=0,n=this.length,s=[],r="string"!=typeof t&&S(t);if(!C.test(t))for(;o<n;o++)for(i=this[o];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?-1<r.index(i):1===i.nodeType&&S.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(1<s.length?S.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?n.call(S(t),this[0]):n.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),S.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return w(t,"parentNode")},parentsUntil:function(t,e,i){return w(t,"parentNode",i)},next:function(t){return L(t,"nextSibling")},prev:function(t){return L(t,"previousSibling")},nextAll:function(t){return w(t,"nextSibling")},prevAll:function(t){return w(t,"previousSibling")},nextUntil:function(t,e,i){return w(t,"nextSibling",i)},prevUntil:function(t,e,i){return w(t,"previousSibling",i)},siblings:function(t){return $((t.parentNode||{}).firstChild,t)},children:function(t){return $(t.firstChild)},contents:function(t){return void 0!==t.contentDocument?t.contentDocument:(A(t,"template")&&(t=t.content||t),S.merge([],t.childNodes))}},function(o,n){S.fn[o]=function(t,e){var i=S.map(this,n,t);return"Until"!==o.slice(-5)&&(e=t),e&&"string"==typeof e&&(i=S.filter(e,i)),1<this.length&&(O[o]||S.uniqueSort(i),P.test(o)&&i.reverse()),this.pushStack(i)}});var M=/[^\x20\t\r\n\f]+/g;function F(t){return t}function H(t){throw t}function q(t,e,i,o){var n;try{t&&_(n=t.promise)?n.call(t).done(e).fail(i):t&&_(n=t.then)?n.call(t,e,i):e.apply(void 0,[t].slice(o))}catch(t){i.apply(void 0,[t])}}S.Callbacks=function(o){o="string"==typeof o?function(t){var i={};return S.each(t.match(M)||[],function(t,e){i[e]=!0}),i}(o):S.extend({},o);function i(){for(s=s||o.once,e=n=!0;a.length;l=-1)for(t=a.shift();++l<r.length;)!1===r[l].apply(t[0],t[1])&&o.stopOnFalse&&(l=r.length,t=!1);o.memory||(t=!1),n=!1,s&&(r=t?[]:"")}var n,t,e,s,r=[],a=[],l=-1,c={add:function(){return r&&(t&&!n&&(l=r.length-1,a.push(t)),function i(t){S.each(t,function(t,e){_(e)?o.unique&&c.has(e)||r.push(e):e&&e.length&&"string"!==x(e)&&i(e)})}(arguments),t&&!n&&i()),this},remove:function(){return S.each(arguments,function(t,e){for(var i;-1<(i=S.inArray(e,r,i));)r.splice(i,1),i<=l&&l--}),this},has:function(t){return t?-1<S.inArray(t,r):0<r.length},empty:function(){return r=r&&[],this},disable:function(){return s=a=[],r=t="",this},disabled:function(){return!r},lock:function(){return s=a=[],t||n||(r=t=""),this},locked:function(){return!!s},fireWith:function(t,e){return s||(e=[t,(e=e||[]).slice?e.slice():e],a.push(e),n||i()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!e}};return c},S.extend({Deferred:function(t){var s=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return a.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var n=arguments;return S.Deferred(function(o){S.each(s,function(t,e){var i=_(n[e[4]])&&n[e[4]];a[e[1]](function(){var t=i&&i.apply(this,arguments);t&&_(t.promise)?t.promise().progress(o.notify).done(o.resolve).fail(o.reject):o[e[0]+"With"](this,i?[t]:arguments)})}),n=null}).promise()},then:function(e,i,o){var l=0;function c(n,s,r,a){return function(){function t(){var t,e;if(!(n<l)){if((t=r.apply(i,o))===s.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"==typeof t||"function"==typeof t)&&t.then,_(e)?a?e.call(t,c(l,s,F,a),c(l,s,H,a)):(l++,e.call(t,c(l,s,F,a),c(l,s,H,a),c(l,s,F,s.notifyWith))):(r!==F&&(i=void 0,o=[t]),(a||s.resolveWith)(i,o))}}var i=this,o=arguments,e=a?t:function(){try{t()}catch(t){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(t,e.stackTrace),l<=n+1&&(r!==H&&(i=void 0,o=[t]),s.rejectWith(i,o))}};n?e():(S.Deferred.getStackHook&&(e.stackTrace=S.Deferred.getStackHook()),k.setTimeout(e))}}return S.Deferred(function(t){s[0][3].add(c(0,t,_(o)?o:F,t.notifyWith)),s[1][3].add(c(0,t,_(e)?e:F)),s[2][3].add(c(0,t,_(i)?i:H))}).promise()},promise:function(t){return null!=t?S.extend(t,r):r}},a={};return S.each(s,function(t,e){var i=e[2],o=e[5];r[e[1]]=i.add,o&&i.add(function(){n=o},s[3-t][2].disable,s[3-t][3].disable,s[0][2].lock,s[0][3].lock),i.add(e[3].fire),a[e[0]]=function(){return a[e[0]+"With"](this===a?void 0:this,arguments),this},a[e[0]+"With"]=i.fireWith}),r.promise(a),t&&t.call(a,a),a},when:function(t){function e(e){return function(t){n[e]=this,s[e]=1<arguments.length?a.call(arguments):t,--i||r.resolveWith(n,s)}}var i=arguments.length,o=i,n=Array(o),s=a.call(arguments),r=S.Deferred();if(i<=1&&(q(t,r.done(e(o)).resolve,r.reject,!i),"pending"===r.state()||_(s[o]&&s[o].then)))return r.then();for(;o--;)q(s[o],e(o),r.reject);return r.promise()}});var I=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(t,e){k.console&&k.console.warn&&t&&I.test(t.name)&&k.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},S.readyException=function(t){k.setTimeout(function(){throw t})};var W=S.Deferred();function z(){T.removeEventListener("DOMContentLoaded",z),k.removeEventListener("load",z),S.ready()}S.fn.ready=function(t){return W.then(t).catch(function(t){S.readyException(t)}),this},S.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--S.readyWait:S.isReady)||(S.isReady=!0)!==t&&0<--S.readyWait||W.resolveWith(T,[S])}}),S.ready.then=W.then,"complete"===T.readyState||"loading"!==T.readyState&&!T.documentElement.doScroll?k.setTimeout(S.ready):(T.addEventListener("DOMContentLoaded",z),k.addEventListener("load",z));var R=function(t,e,i,o,n,s,r){var a=0,l=t.length,c=null==i;if("object"===x(i))for(a in n=!0,i)R(t,e,a,i[a],!0,s,r);else if(void 0!==o&&(n=!0,_(o)||(r=!0),c&&(e=r?(e.call(t,o),null):(c=e,function(t,e,i){return c.call(S(t),i)})),e))for(;a<l;a++)e(t[a],i,r?o:o.call(t[a],a,e(t[a],i)));return n?t:c?e.call(t):l?e(t[0],i):s},B=/^-ms-/,U=/-([a-z])/g;function X(t,e){return e.toUpperCase()}function V(t){return t.replace(B,"ms-").replace(U,X)}function Y(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType}function G(){this.expando=S.expando+G.uid++}G.uid=1,G.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Y(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var o,n=this.cache(t);if("string"==typeof e)n[V(e)]=i;else for(o in e)n[V(o)]=e[o];return n},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][V(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,o=t[this.expando];if(void 0!==o){if(void 0!==e){i=(e=Array.isArray(e)?e.map(V):(e=V(e))in o?[e]:e.match(M)||[]).length;for(;i--;)delete o[e[i]]}void 0!==e&&!S.isEmptyObject(o)||(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!S.isEmptyObject(e)}};var Q=new G,K=new G,J=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function tt(t,e,i){var o;if(void 0===i&&1===t.nodeType)if(o="data-"+e.replace(Z,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(o))){try{i=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:J.test(t)?JSON.parse(t):t)}(i)}catch(t){}K.set(t,e,i)}else i=void 0;return i}S.extend({hasData:function(t){return K.hasData(t)||Q.hasData(t)},data:function(t,e,i){return K.access(t,e,i)},removeData:function(t,e){K.remove(t,e)},_data:function(t,e,i){return Q.access(t,e,i)},_removeData:function(t,e){Q.remove(t,e)}}),S.fn.extend({data:function(i,t){var e,o,n,s=this[0],r=s&&s.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){K.set(this,i)}):R(this,function(t){var e;if(s&&void 0===t)return void 0!==(e=K.get(s,i))?e:void 0!==(e=tt(s,i))?e:void 0;this.each(function(){K.set(this,i,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(n=K.get(s),1===s.nodeType&&!Q.get(s,"hasDataAttrs"))){for(e=r.length;e--;)r[e]&&0===(o=r[e].name).indexOf("data-")&&(o=V(o.slice(5)),tt(s,o,n[o]));Q.set(s,"hasDataAttrs",!0)}return n},removeData:function(t){return this.each(function(){K.remove(this,t)})}}),S.extend({queue:function(t,e,i){var o;if(t)return e=(e||"fx")+"queue",o=Q.get(t,e),i&&(!o||Array.isArray(i)?o=Q.access(t,e,S.makeArray(i)):o.push(i)),o||[]},dequeue:function(t,e){e=e||"fx";var i=S.queue(t,e),o=i.length,n=i.shift(),s=S._queueHooks(t,e);"inprogress"===n&&(n=i.shift(),o--),n&&("fx"===e&&i.unshift("inprogress"),delete s.stop,n.call(t,function(){S.dequeue(t,e)},s)),!o&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return Q.get(t,i)||Q.access(t,i,{empty:S.Callbacks("once memory").add(function(){Q.remove(t,[e+"queue",i])})})}}),S.fn.extend({queue:function(e,i){var t=2;return"string"!=typeof e&&(i=e,e="fx",t--),arguments.length<t?S.queue(this[0],e):void 0===i?this:this.each(function(){var t=S.queue(this,e,i);S._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&S.dequeue(this,e)})},dequeue:function(t){return this.each(function(){S.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){function i(){--n||s.resolveWith(r,[r])}var o,n=1,s=S.Deferred(),r=this,a=this.length;for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(o=Q.get(r[a],t+"queueHooks"))&&o.empty&&(n++,o.empty.add(i));return i(),s.promise(e)}});var et=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,it=new RegExp("^(?:([+-])=|)("+et+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],nt=T.documentElement,st=function(t){return S.contains(t.ownerDocument,t)},rt={composed:!0};nt.getRootNode&&(st=function(t){return S.contains(t.ownerDocument,t)||t.getRootNode(rt)===t.ownerDocument});function at(t,e,i,o){var n,s,r={};for(s in e)r[s]=t.style[s],t.style[s]=e[s];for(s in n=i.apply(t,o||[]),e)t.style[s]=r[s];return n}var lt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&st(t)&&"none"===S.css(t,"display")};function ct(t,e,i,o){var n,s,r=20,a=o?function(){return o.cur()}:function(){return S.css(t,e,"")},l=a(),c=i&&i[3]||(S.cssNumber[e]?"":"px"),d=t.nodeType&&(S.cssNumber[e]||"px"!==c&&+l)&&it.exec(S.css(t,e));if(d&&d[3]!==c){for(l/=2,c=c||d[3],d=+l||1;r--;)S.style(t,e,d+c),(1-s)*(1-(s=a()/l||.5))<=0&&(r=0),d/=s;d*=2,S.style(t,e,d+c),i=i||[]}return i&&(d=+d||+l||0,n=i[1]?d+(i[1]+1)*i[2]:+i[2],o&&(o.unit=c,o.start=d,o.end=n)),n}var dt={};function pt(t,e){for(var i,o,n,s,r,a,l,c=[],d=0,p=t.length;d<p;d++)(o=t[d]).style&&(i=o.style.display,e?("none"===i&&(c[d]=Q.get(o,"display")||null,c[d]||(o.style.display="")),""===o.style.display&&lt(o)&&(c[d]=(l=r=s=void 0,r=(n=o).ownerDocument,a=n.nodeName,(l=dt[a])||(s=r.body.appendChild(r.createElement(a)),l=S.css(s,"display"),s.parentNode.removeChild(s),"none"===l&&(l="block"),dt[a]=l)))):"none"!==i&&(c[d]="none",Q.set(o,"display",i)));for(d=0;d<p;d++)null!=c[d]&&(t[d].style.display=c[d]);return t}S.fn.extend({show:function(){return pt(this,!0)},hide:function(){return pt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){lt(this)?S(this).show():S(this).hide()})}});var ht=/^(?:checkbox|radio)$/i,ut=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ft=/^$|^module$|\/(?:java|ecma)script/i,mt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function gt(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&A(t,e)?S.merge([t],i):i}function vt(t,e){for(var i=0,o=t.length;i<o;i++)Q.set(t[i],"globalEval",!e||Q.get(e[i],"globalEval"))}mt.optgroup=mt.option,mt.tbody=mt.tfoot=mt.colgroup=mt.caption=mt.thead,mt.th=mt.td;var yt,_t,bt=/<|&#?\w+;/;function xt(t,e,i,o,n){for(var s,r,a,l,c,d,p=e.createDocumentFragment(),h=[],u=0,f=t.length;u<f;u++)if((s=t[u])||0===s)if("object"===x(s))S.merge(h,s.nodeType?[s]:s);else if(bt.test(s)){for(r=r||p.appendChild(e.createElement("div")),a=(ut.exec(s)||["",""])[1].toLowerCase(),l=mt[a]||mt._default,r.innerHTML=l[1]+S.htmlPrefilter(s)+l[2],d=l[0];d--;)r=r.lastChild;S.merge(h,r.childNodes),(r=p.firstChild).textContent=""}else h.push(e.createTextNode(s));for(p.textContent="",u=0;s=h[u++];)if(o&&-1<S.inArray(s,o))n&&n.push(s);else if(c=st(s),r=gt(p.appendChild(s),"script"),c&&vt(r),i)for(d=0;s=r[d++];)ft.test(s.type||"")&&i.push(s);return p}yt=T.createDocumentFragment().appendChild(T.createElement("div")),(_t=T.createElement("input")).setAttribute("type","radio"),_t.setAttribute("checked","checked"),_t.setAttribute("name","t"),yt.appendChild(_t),y.checkClone=yt.cloneNode(!0).cloneNode(!0).lastChild.checked,yt.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!yt.cloneNode(!0).lastChild.defaultValue;var wt=/^key/,kt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Tt=/^([^.]*)(?:\.(.+)|)/;function St(){return!0}function $t(){return!1}function Ct(t,e){return t===function(){try{return T.activeElement}catch(t){}}()==("focus"===e)}function At(t,e,i,o,n,s){var r,a;if("object"==typeof e){for(a in"string"!=typeof i&&(o=o||i,i=void 0),e)At(t,a,i,o,e[a],s);return t}if(null==o&&null==n?(n=i,o=i=void 0):null==n&&("string"==typeof i?(n=o,o=void 0):(n=o,o=i,i=void 0)),!1===n)n=$t;else if(!n)return t;return 1===s&&(r=n,(n=function(t){return S().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=S.guid++)),t.each(function(){S.event.add(this,e,n,o,i)})}function Et(t,n,s){s?(Q.set(t,n,!1),S.event.add(t,n,{namespace:!1,handler:function(t){var e,i,o=Q.get(this,n);if(1&t.isTrigger&&this[n]){if(o.length)(S.event.special[n]||{}).delegateType&&t.stopPropagation();else if(o=a.call(arguments),Q.set(this,n,o),e=s(this,n),this[n](),o!==(i=Q.get(this,n))||e?Q.set(this,n,!1):i={},o!==i)return t.stopImmediatePropagation(),t.preventDefault(),i.value}else o.length&&(Q.set(this,n,{value:S.event.trigger(S.extend(o[0],S.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===Q.get(t,n)&&S.event.add(t,n,St)}S.event={global:{},add:function(e,t,i,o,n){var s,r,a,l,c,d,p,h,u,f,m,g=Q.get(e);if(g)for(i.handler&&(i=(s=i).handler,n=s.selector),n&&S.find.matchesSelector(nt,n),i.guid||(i.guid=S.guid++),(l=g.events)||(l=g.events={}),(r=g.handle)||(r=g.handle=function(t){return void 0!==S&&S.event.triggered!==t.type?S.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(M)||[""]).length;c--;)u=m=(a=Tt.exec(t[c])||[])[1],f=(a[2]||"").split(".").sort(),u&&(p=S.event.special[u]||{},u=(n?p.delegateType:p.bindType)||u,p=S.event.special[u]||{},d=S.extend({type:u,origType:m,data:o,handler:i,guid:i.guid,selector:n,needsContext:n&&S.expr.match.needsContext.test(n),namespace:f.join(".")},s),(h=l[u])||((h=l[u]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,o,f,r)||e.addEventListener&&e.addEventListener(u,r)),p.add&&(p.add.call(e,d),d.handler.guid||(d.handler.guid=i.guid)),n?h.splice(h.delegateCount++,0,d):h.push(d),S.event.global[u]=!0)},remove:function(t,e,i,o,n){var s,r,a,l,c,d,p,h,u,f,m,g=Q.hasData(t)&&Q.get(t);if(g&&(l=g.events)){for(c=(e=(e||"").match(M)||[""]).length;c--;)if(u=m=(a=Tt.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),u){for(p=S.event.special[u]||{},h=l[u=(o?p.delegateType:p.bindType)||u]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=s=h.length;s--;)d=h[s],!n&&m!==d.origType||i&&i.guid!==d.guid||a&&!a.test(d.namespace)||o&&o!==d.selector&&("**"!==o||!d.selector)||(h.splice(s,1),d.selector&&h.delegateCount--,p.remove&&p.remove.call(t,d));r&&!h.length&&(p.teardown&&!1!==p.teardown.call(t,f,g.handle)||S.removeEvent(t,u,g.handle),delete l[u])}else for(u in l)S.event.remove(t,u+e[c],i,o,!0);S.isEmptyObject(l)&&Q.remove(t,"handle events")}},dispatch:function(t){var e,i,o,n,s,r,a=S.event.fix(t),l=new Array(arguments.length),c=(Q.get(this,"events")||{})[a.type]||[],d=S.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,a)){for(r=S.event.handlers.call(this,a,c),e=0;(n=r[e++])&&!a.isPropagationStopped();)for(a.currentTarget=n.elem,i=0;(s=n.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==s.namespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,void 0!==(o=((S.event.special[s.origType]||{}).handle||s.handler).apply(n.elem,l))&&!1===(a.result=o)&&(a.preventDefault(),a.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,a),a.result}},handlers:function(t,e){var i,o,n,s,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&1<=t.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(s=[],r={},i=0;i<l;i++)void 0===r[n=(o=e[i]).selector+" "]&&(r[n]=o.needsContext?-1<S(n,this).index(c):S.find(n,this,null,[c]).length),r[n]&&s.push(o);s.length&&a.push({elem:c,handlers:s})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(e,t){Object.defineProperty(S.Event.prototype,e,{enumerable:!0,configurable:!0,get:_(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[S.expando]?t:new S.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return ht.test(e.type)&&e.click&&A(e,"input")&&Et(e,"click",St),!1},trigger:function(t){var e=this||t;return ht.test(e.type)&&e.click&&A(e,"input")&&Et(e,"click"),!0},_default:function(t){var e=t.target;return ht.test(e.type)&&e.click&&A(e,"input")&&Q.get(e,"click")||A(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},S.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},S.Event=function(t,e){if(!(this instanceof S.Event))return new S.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?St:$t,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&S.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:$t,isPropagationStopped:$t,isImmediatePropagationStopped:$t,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=St,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=St,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=St,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&wt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&kt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},function(t,e){S.event.special[t]={setup:function(){return Et(this,t,Ct),!1},trigger:function(){return Et(this,t),!0},delegateType:e}}),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,n){S.event.special[t]={delegateType:n,bindType:n,handle:function(t){var e,i=t.relatedTarget,o=t.handleObj;return i&&(i===this||S.contains(this,i))||(t.type=o.origType,e=o.handler.apply(this,arguments),t.type=n),e}}}),S.fn.extend({on:function(t,e,i,o){return At(this,t,e,i,o)},one:function(t,e,i,o){return At(this,t,e,i,o,1)},off:function(t,e,i){var o,n;if(t&&t.preventDefault&&t.handleObj)return o=t.handleObj,S(t.delegateTarget).off(o.namespace?o.origType+"."+o.namespace:o.origType,o.selector,o.handler),this;if("object"!=typeof t)return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=$t),this.each(function(){S.event.remove(this,t,i,e)});for(n in t)this.off(n,e,t[n]);return this}});var Dt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,jt=/<script|<style|<link/i,Nt=/checked\s*(?:[^=]|=\s*.checked.)/i,Pt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ot(t,e){return A(t,"table")&&A(11!==e.nodeType?e:e.firstChild,"tr")&&S(t).children("tbody")[0]||t}function Lt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Mt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Ft(t,e){var i,o,n,s,r,a,l,c;if(1===e.nodeType){if(Q.hasData(t)&&(s=Q.access(t),r=Q.set(e,s),c=s.events))for(n in delete r.handle,r.events={},c)for(i=0,o=c[n].length;i<o;i++)S.event.add(e,n,c[n][i]);K.hasData(t)&&(a=K.access(t),l=S.extend({},a),K.set(e,l))}}function Ht(i,o,n,s){o=g.apply([],o);var t,e,r,a,l,c,d=0,p=i.length,h=p-1,u=o[0],f=_(u);if(f||1<p&&"string"==typeof u&&!y.checkClone&&Nt.test(u))return i.each(function(t){var e=i.eq(t);f&&(o[0]=u.call(this,t,e.html())),Ht(e,o,n,s)});if(p&&(e=(t=xt(o,i[0].ownerDocument,!1,i,s)).firstChild,1===t.childNodes.length&&(t=e),e||s)){for(a=(r=S.map(gt(t,"script"),Lt)).length;d<p;d++)l=t,d!==h&&(l=S.clone(l,!0,!0),a&&S.merge(r,gt(l,"script"))),n.call(i[d],l,d);if(a)for(c=r[r.length-1].ownerDocument,S.map(r,Mt),d=0;d<a;d++)l=r[d],ft.test(l.type||"")&&!Q.access(l,"globalEval")&&S.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?S._evalUrl&&!l.noModule&&S._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):b(l.textContent.replace(Pt,""),l,c))}return i}function qt(t,e,i){for(var o,n=e?S.filter(e,t):t,s=0;null!=(o=n[s]);s++)i||1!==o.nodeType||S.cleanData(gt(o)),o.parentNode&&(i&&st(o)&&vt(gt(o,"script")),o.parentNode.removeChild(o));return t}S.extend({htmlPrefilter:function(t){return t.replace(Dt,"<$1></$2>")},clone:function(t,e,i){var o,n,s,r,a,l,c,d=t.cloneNode(!0),p=st(t);if(!(y.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||S.isXMLDoc(t)))for(r=gt(d),o=0,n=(s=gt(t)).length;o<n;o++)a=s[o],l=r[o],void 0,"input"===(c=l.nodeName.toLowerCase())&&ht.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(i)for(s=s||gt(t),r=r||gt(d),o=0,n=s.length;o<n;o++)Ft(s[o],r[o]);else Ft(t,d);return 0<(r=gt(d,"script")).length&&vt(r,!p&&gt(t,"script")),d},cleanData:function(t){for(var e,i,o,n=S.event.special,s=0;void 0!==(i=t[s]);s++)if(Y(i)){if(e=i[Q.expando]){if(e.events)for(o in e.events)n[o]?S.event.remove(i,o):S.removeEvent(i,o,e.handle);i[Q.expando]=void 0}i[K.expando]&&(i[K.expando]=void 0)}}}),S.fn.extend({detach:function(t){return qt(this,t,!0)},remove:function(t){return qt(this,t)},text:function(t){return R(this,function(t){return void 0===t?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Ht(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ot(this,t).appendChild(t)})},prepend:function(){return Ht(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Ot(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Ht(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Ht(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(S.cleanData(gt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return S.clone(this,t,e)})},html:function(t){return R(this,function(t){var e=this[0]||{},i=0,o=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!jt.test(t)&&!mt[(ut.exec(t)||["",""])[1].toLowerCase()]){t=S.htmlPrefilter(t);try{for(;i<o;i++)1===(e=this[i]||{}).nodeType&&(S.cleanData(gt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var i=[];return Ht(this,arguments,function(t){var e=this.parentNode;S.inArray(this,i)<0&&(S.cleanData(gt(this)),e&&e.replaceChild(t,this))},i)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,r){S.fn[t]=function(t){for(var e,i=[],o=S(t),n=o.length-1,s=0;s<=n;s++)e=s===n?this:this.clone(!0),S(o[s])[r](e),l.apply(i,e.get());return this.pushStack(i)}});var It,Wt,zt,Rt,Bt,Ut,Xt,Vt=new RegExp("^("+et+")(?!px)[a-z%]+$","i"),Yt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=k),e.getComputedStyle(t)},Gt=new RegExp(ot.join("|"),"i");function Qt(){if(Xt){Ut.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Xt.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",nt.appendChild(Ut).appendChild(Xt);var t=k.getComputedStyle(Xt);It="1%"!==t.top,Bt=12===Kt(t.marginLeft),Xt.style.right="60%",Rt=36===Kt(t.right),Wt=36===Kt(t.width),Xt.style.position="absolute",zt=12===Kt(Xt.offsetWidth/3),nt.removeChild(Ut),Xt=null}}function Kt(t){return Math.round(parseFloat(t))}function Jt(t,e,i){var o,n,s,r,a=t.style;return(i=i||Yt(t))&&(""!==(r=i.getPropertyValue(e)||i[e])||st(t)||(r=S.style(t,e)),!y.pixelBoxStyles()&&Vt.test(r)&&Gt.test(e)&&(o=a.width,n=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=o,a.minWidth=n,a.maxWidth=s)),void 0!==r?r+"":r}function Zt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}Ut=T.createElement("div"),(Xt=T.createElement("div")).style&&(Xt.style.backgroundClip="content-box",Xt.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Xt.style.backgroundClip,S.extend(y,{boxSizingReliable:function(){return Qt(),Wt},pixelBoxStyles:function(){return Qt(),Rt},pixelPosition:function(){return Qt(),It},reliableMarginLeft:function(){return Qt(),Bt},scrollboxSize:function(){return Qt(),zt}}));var te=["Webkit","Moz","ms"],ee=T.createElement("div").style,ie={};function oe(t){var e=S.cssProps[t]||ie[t];return e||(t in ee?t:ie[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=te.length;i--;)if((t=te[i]+e)in ee)return t}(t)||t)}var ne=/^(none|table(?!-c[ea]).+)/,se=/^--/,re={position:"absolute",visibility:"hidden",display:"block"},ae={letterSpacing:"0",fontWeight:"400"};function le(t,e,i){var o=it.exec(e);return o?Math.max(0,o[2]-(i||0))+(o[3]||"px"):e}function ce(t,e,i,o,n,s){var r="width"===e?1:0,a=0,l=0;if(i===(o?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=S.css(t,i+ot[r],!0,n)),o?("content"===i&&(l-=S.css(t,"padding"+ot[r],!0,n)),"margin"!==i&&(l-=S.css(t,"border"+ot[r]+"Width",!0,n))):(l+=S.css(t,"padding"+ot[r],!0,n),"padding"!==i?l+=S.css(t,"border"+ot[r]+"Width",!0,n):a+=S.css(t,"border"+ot[r]+"Width",!0,n));return!o&&0<=s&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-l-a-.5))||0),l}function de(t,e,i){var o=Yt(t),n=(!y.boxSizingReliable()||i)&&"border-box"===S.css(t,"boxSizing",!1,o),s=n,r=Jt(t,e,o),a="offset"+e[0].toUpperCase()+e.slice(1);if(Vt.test(r)){if(!i)return r;r="auto"}return(!y.boxSizingReliable()&&n||"auto"===r||!parseFloat(r)&&"inline"===S.css(t,"display",!1,o))&&t.getClientRects().length&&(n="border-box"===S.css(t,"boxSizing",!1,o),(s=a in t)&&(r=t[a])),(r=parseFloat(r)||0)+ce(t,e,i||(n?"border":"content"),s,o,r)+"px"}function pe(t,e,i,o,n){return new pe.prototype.init(t,e,i,o,n)}S.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Jt(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,i,o){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var n,s,r,a=V(e),l=se.test(e),c=t.style;if(l||(e=oe(a)),r=S.cssHooks[e]||S.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(n=r.get(t,!1,o))?n:c[e];"string"===(s=typeof i)&&(n=it.exec(i))&&n[1]&&(i=ct(t,e,n),s="number"),null!=i&&i==i&&("number"!==s||l||(i+=n&&n[3]||(S.cssNumber[a]?"":"px")),y.clearCloneStyle||""!==i||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,o))||(l?c.setProperty(e,i):c[e]=i))}},css:function(t,e,i,o){var n,s,r,a=V(e);return se.test(e)||(e=oe(a)),(r=S.cssHooks[e]||S.cssHooks[a])&&"get"in r&&(n=r.get(t,!0,i)),void 0===n&&(n=Jt(t,e,o)),"normal"===n&&e in ae&&(n=ae[e]),""===i||i?(s=parseFloat(n),!0===i||isFinite(s)?s||0:n):n}}),S.each(["height","width"],function(t,l){S.cssHooks[l]={get:function(t,e,i){if(e)return!ne.test(S.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?de(t,l,i):at(t,re,function(){return de(t,l,i)})},set:function(t,e,i){var o,n=Yt(t),s=!y.scrollboxSize()&&"absolute"===n.position,r=(s||i)&&"border-box"===S.css(t,"boxSizing",!1,n),a=i?ce(t,l,i,r,n):0;return r&&s&&(a-=Math.ceil(t["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(n[l])-ce(t,l,"border",!1,n)-.5)),a&&(o=it.exec(e))&&"px"!==(o[3]||"px")&&(t.style[l]=e,e=S.css(t,l)),le(0,e,a)}}}),S.cssHooks.marginLeft=Zt(y.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Jt(t,"marginLeft"))||t.getBoundingClientRect().left-at(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),S.each({margin:"",padding:"",border:"Width"},function(n,s){S.cssHooks[n+s]={expand:function(t){for(var e=0,i={},o="string"==typeof t?t.split(" "):[t];e<4;e++)i[n+ot[e]+s]=o[e]||o[e-2]||o[0];return i}},"margin"!==n&&(S.cssHooks[n+s].set=le)}),S.fn.extend({css:function(t,e){return R(this,function(t,e,i){var o,n,s={},r=0;if(Array.isArray(e)){for(o=Yt(t),n=e.length;r<n;r++)s[e[r]]=S.css(t,e[r],!1,o);return s}return void 0!==i?S.style(t,e,i):S.css(t,e)},t,e,1<arguments.length)}}),((S.Tween=pe).prototype={constructor:pe,init:function(t,e,i,o,n,s){this.elem=t,this.prop=i,this.easing=n||S.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=o,this.unit=s||(S.cssNumber[i]?"":"px")},cur:function(){var t=pe.propHooks[this.prop];return t&&t.get?t.get(this):pe.propHooks._default.get(this)},run:function(t){var e,i=pe.propHooks[this.prop];return this.options.duration?this.pos=e=S.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):pe.propHooks._default.set(this),this}}).init.prototype=pe.prototype,(pe.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=S.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){S.fx.step[t.prop]?S.fx.step[t.prop](t):1!==t.elem.nodeType||!S.cssHooks[t.prop]&&null==t.elem.style[oe(t.prop)]?t.elem[t.prop]=t.now:S.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=pe.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},S.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},S.fx=pe.prototype.init,S.fx.step={};var he,ue,fe,me,ge=/^(?:toggle|show|hide)$/,ve=/queueHooks$/;function ye(){ue&&(!1===T.hidden&&k.requestAnimationFrame?k.requestAnimationFrame(ye):k.setTimeout(ye,S.fx.interval),S.fx.tick())}function _e(){return k.setTimeout(function(){he=void 0}),he=Date.now()}function be(t,e){var i,o=0,n={height:t};for(e=e?1:0;o<4;o+=2-e)n["margin"+(i=ot[o])]=n["padding"+i]=t;return e&&(n.opacity=n.width=t),n}function xe(t,e,i){for(var o,n=(we.tweeners[e]||[]).concat(we.tweeners["*"]),s=0,r=n.length;s<r;s++)if(o=n[s].call(i,e,t))return o}function we(s,t,e){var i,r,o=0,n=we.prefilters.length,a=S.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=he||_e(),e=Math.max(0,c.startTime+c.duration-t),i=1-(e/c.duration||0),o=0,n=c.tweens.length;o<n;o++)c.tweens[o].run(i);return a.notifyWith(s,[c,i,e]),i<1&&n?e:(n||a.notifyWith(s,[c,1,0]),a.resolveWith(s,[c]),!1)},c=a.promise({elem:s,props:S.extend({},t),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},e),originalProperties:t,originalOptions:e,startTime:he||_e(),duration:e.duration,tweens:[],createTween:function(t,e){var i=S.Tween(s,c.opts,t,e,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var e=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;e<i;e++)c.tweens[e].run(1);return t?(a.notifyWith(s,[c,1,0]),a.resolveWith(s,[c,t])):a.rejectWith(s,[c,t]),this}}),d=c.props;for(!function(t,e){var i,o,n,s,r;for(i in t)if(n=e[o=V(i)],s=t[i],Array.isArray(s)&&(n=s[1],s=t[i]=s[0]),i!==o&&(t[o]=s,delete t[i]),(r=S.cssHooks[o])&&"expand"in r)for(i in s=r.expand(s),delete t[o],s)i in t||(t[i]=s[i],e[i]=n);else e[o]=n}(d,c.opts.specialEasing);o<n;o++)if(i=we.prefilters[o].call(c,s,d,c.opts))return _(i.stop)&&(S._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return S.map(d,xe,c),_(c.opts.start)&&c.opts.start.call(s,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),S.fx.timer(S.extend(l,{elem:s,anim:c,queue:c.opts.queue})),c}S.Animation=S.extend(we,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return ct(i.elem,t,it.exec(e),i),i}]},tweener:function(t,e){for(var i,o=0,n=(t=_(t)?(e=t,["*"]):t.match(M)).length;o<n;o++)i=t[o],we.tweeners[i]=we.tweeners[i]||[],we.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var o,n,s,r,a,l,c,d,p="width"in e||"height"in e,h=this,u={},f=t.style,m=t.nodeType&&lt(t),g=Q.get(t,"fxshow");for(o in i.queue||(null==(r=S._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,h.always(function(){h.always(function(){r.unqueued--,S.queue(t,"fx").length||r.empty.fire()})})),e)if(n=e[o],ge.test(n)){if(delete e[o],s=s||"toggle"===n,n===(m?"hide":"show")){if("show"!==n||!g||void 0===g[o])continue;m=!0}u[o]=g&&g[o]||S.style(t,o)}if((l=!S.isEmptyObject(e))||!S.isEmptyObject(u))for(o in p&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=Q.get(t,"display")),"none"===(d=S.css(t,"display"))&&(c?d=c:(pt([t],!0),c=t.style.display||c,d=S.css(t,"display"),pt([t]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===S.css(t,"float")&&(l||(h.done(function(){f.display=c}),null==c&&(d=f.display,c="none"===d?"":d)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1,u)l||(g?"hidden"in g&&(m=g.hidden):g=Q.access(t,"fxshow",{display:c}),s&&(g.hidden=!m),m&&pt([t],!0),h.done(function(){for(o in m||pt([t]),Q.remove(t,"fxshow"),u)S.style(t,o,u[o])})),l=xe(m?g[o]:0,o,h),o in g||(g[o]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?we.prefilters.unshift(t):we.prefilters.push(t)}}),S.speed=function(t,e,i){var o=t&&"object"==typeof t?S.extend({},t):{complete:i||!i&&e||_(t)&&t,duration:t,easing:i&&e||e&&!_(e)&&e};return S.fx.off?o.duration=0:"number"!=typeof o.duration&&(o.duration in S.fx.speeds?o.duration=S.fx.speeds[o.duration]:o.duration=S.fx.speeds._default),null!=o.queue&&!0!==o.queue||(o.queue="fx"),o.old=o.complete,o.complete=function(){_(o.old)&&o.old.call(this),o.queue&&S.dequeue(this,o.queue)},o},S.fn.extend({fadeTo:function(t,e,i,o){return this.filter(lt).css("opacity",0).show().end().animate({opacity:e},t,i,o)},animate:function(e,t,i,o){function n(){var t=we(this,S.extend({},e),r);(s||Q.get(this,"finish"))&&t.stop(!0)}var s=S.isEmptyObject(e),r=S.speed(t,i,o);return n.finish=n,s||!1===r.queue?this.each(n):this.queue(r.queue,n)},stop:function(n,t,s){function r(t){var e=t.stop;delete t.stop,e(s)}return"string"!=typeof n&&(s=t,t=n,n=void 0),t&&!1!==n&&this.queue(n||"fx",[]),this.each(function(){var t=!0,e=null!=n&&n+"queueHooks",i=S.timers,o=Q.get(this);if(e)o[e]&&o[e].stop&&r(o[e]);else for(e in o)o[e]&&o[e].stop&&ve.test(e)&&r(o[e]);for(e=i.length;e--;)i[e].elem!==this||null!=n&&i[e].queue!==n||(i[e].anim.stop(s),t=!1,i.splice(e,1));!t&&s||S.dequeue(this,n)})},finish:function(r){return!1!==r&&(r=r||"fx"),this.each(function(){var t,e=Q.get(this),i=e[r+"queue"],o=e[r+"queueHooks"],n=S.timers,s=i?i.length:0;for(e.finish=!0,S.queue(this,r,[]),o&&o.stop&&o.stop.call(this,!0),t=n.length;t--;)n[t].elem===this&&n[t].queue===r&&(n[t].anim.stop(!0),n.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete e.finish})}}),S.each(["toggle","show","hide"],function(t,o){var n=S.fn[o];S.fn[o]=function(t,e,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(be(o,!0),t,e,i)}}),S.each({slideDown:be("show"),slideUp:be("hide"),slideToggle:be("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,o){S.fn[t]=function(t,e,i){return this.animate(o,t,e,i)}}),S.timers=[],S.fx.tick=function(){var t,e=0,i=S.timers;for(he=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||S.fx.stop(),he=void 0},S.fx.timer=function(t){S.timers.push(t),S.fx.start()},S.fx.interval=13,S.fx.start=function(){ue||(ue=!0,ye())},S.fx.stop=function(){ue=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(o,t){return o=S.fx&&S.fx.speeds[o]||o,t=t||"fx",this.queue(t,function(t,e){var i=k.setTimeout(t,o);e.stop=function(){k.clearTimeout(i)}})},fe=T.createElement("input"),me=T.createElement("select").appendChild(T.createElement("option")),fe.type="checkbox",y.checkOn=""!==fe.value,y.optSelected=me.selected,(fe=T.createElement("input")).value="t",fe.type="radio",y.radioValue="t"===fe.value;var ke,Te=S.expr.attrHandle;S.fn.extend({attr:function(t,e){return R(this,S.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){S.removeAttr(this,t)})}}),S.extend({attr:function(t,e,i){var o,n,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===t.getAttribute?S.prop(t,e,i):(1===s&&S.isXMLDoc(t)||(n=S.attrHooks[e.toLowerCase()]||(S.expr.match.bool.test(e)?ke:void 0)),void 0!==i?null===i?void S.removeAttr(t,e):n&&"set"in n&&void 0!==(o=n.set(t,i,e))?o:(t.setAttribute(e,i+""),i):n&&"get"in n&&null!==(o=n.get(t,e))?o:null==(o=S.find.attr(t,e))?void 0:o)},attrHooks:{type:{set:function(t,e){if(!y.radioValue&&"radio"===e&&A(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,o=0,n=e&&e.match(M);if(n&&1===t.nodeType)for(;i=n[o++];)t.removeAttribute(i)}}),ke={set:function(t,e,i){return!1===e?S.removeAttr(t,i):t.setAttribute(i,i),i}},S.each(S.expr.match.bool.source.match(/\w+/g),function(t,e){var r=Te[e]||S.find.attr;Te[e]=function(t,e,i){var o,n,s=e.toLowerCase();return i||(n=Te[s],Te[s]=o,o=null!=r(t,e,i)?s:null,Te[s]=n),o}});var Se=/^(?:input|select|textarea|button)$/i,$e=/^(?:a|area)$/i;function Ce(t){return(t.match(M)||[]).join(" ")}function Ae(t){return t.getAttribute&&t.getAttribute("class")||""}function Ee(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(M)||[]}S.fn.extend({prop:function(t,e){return R(this,S.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[S.propFix[t]||t]})}}),S.extend({prop:function(t,e,i){var o,n,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&S.isXMLDoc(t)||(e=S.propFix[e]||e,n=S.propHooks[e]),void 0!==i?n&&"set"in n&&void 0!==(o=n.set(t,i,e))?o:t[e]=i:n&&"get"in n&&null!==(o=n.get(t,e))?o:t[e]},propHooks:{tabIndex:{get:function(t){var e=S.find.attr(t,"tabindex");return e?parseInt(e,10):Se.test(t.nodeName)||$e.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(S.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){S.propFix[this.toLowerCase()]=this}),S.fn.extend({addClass:function(e){var t,i,o,n,s,r,a,l=0;if(_(e))return this.each(function(t){S(this).addClass(e.call(this,t,Ae(this)))});if((t=Ee(e)).length)for(;i=this[l++];)if(n=Ae(i),o=1===i.nodeType&&" "+Ce(n)+" "){for(r=0;s=t[r++];)o.indexOf(" "+s+" ")<0&&(o+=s+" ");n!==(a=Ce(o))&&i.setAttribute("class",a)}return this},removeClass:function(e){var t,i,o,n,s,r,a,l=0;if(_(e))return this.each(function(t){S(this).removeClass(e.call(this,t,Ae(this)))});if(!arguments.length)return this.attr("class","");if((t=Ee(e)).length)for(;i=this[l++];)if(n=Ae(i),o=1===i.nodeType&&" "+Ce(n)+" "){for(r=0;s=t[r++];)for(;-1<o.indexOf(" "+s+" ");)o=o.replace(" "+s+" "," ");n!==(a=Ce(o))&&i.setAttribute("class",a)}return this},toggleClass:function(n,e){var s=typeof n,r="string"==s||Array.isArray(n);return"boolean"==typeof e&&r?e?this.addClass(n):this.removeClass(n):_(n)?this.each(function(t){S(this).toggleClass(n.call(this,t,Ae(this),e),e)}):this.each(function(){var t,e,i,o;if(r)for(e=0,i=S(this),o=Ee(n);t=o[e++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==n&&"boolean"!=s||((t=Ae(this))&&Q.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===n?"":Q.get(this,"__className__")||""))})},hasClass:function(t){var e,i,o=0;for(e=" "+t+" ";i=this[o++];)if(1===i.nodeType&&-1<(" "+Ce(Ae(i))+" ").indexOf(e))return!0;return!1}});var De=/\r/g;S.fn.extend({val:function(i){var o,t,n,e=this[0];return arguments.length?(n=_(i),this.each(function(t){var e;1===this.nodeType&&(null==(e=n?i.call(this,t,S(this).val()):i)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=S.map(e,function(t){return null==t?"":t+""})),(o=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in o&&void 0!==o.set(this,e,"value")||(this.value=e))})):e?(o=S.valHooks[e.type]||S.valHooks[e.nodeName.toLowerCase()])&&"get"in o&&void 0!==(t=o.get(e,"value"))?t:"string"==typeof(t=e.value)?t.replace(De,""):null==t?"":t:void 0}}),S.extend({valHooks:{option:{get:function(t){var e=S.find.attr(t,"value");return null!=e?e:Ce(S.text(t))}},select:{get:function(t){var e,i,o,n=t.options,s=t.selectedIndex,r="select-one"===t.type,a=r?null:[],l=r?s+1:n.length;for(o=s<0?l:r?s:0;o<l;o++)if(((i=n[o]).selected||o===s)&&!i.disabled&&(!i.parentNode.disabled||!A(i.parentNode,"optgroup"))){if(e=S(i).val(),r)return e;a.push(e)}return a},set:function(t,e){for(var i,o,n=t.options,s=S.makeArray(e),r=n.length;r--;)((o=n[r]).selected=-1<S.inArray(S.valHooks.option.get(o),s))&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),S.each(["radio","checkbox"],function(){S.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<S.inArray(S(t).val(),e)}},y.checkOn||(S.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),y.focusin="onfocusin"in k;function je(t){t.stopPropagation()}var Ne=/^(?:focusinfocus|focusoutblur)$/;S.extend(S.event,{trigger:function(t,e,i,o){var n,s,r,a,l,c,d,p,h=[i||T],u=v.call(t,"type")?t.type:t,f=v.call(t,"namespace")?t.namespace.split("."):[];if(s=p=r=i=i||T,3!==i.nodeType&&8!==i.nodeType&&!Ne.test(u+S.event.triggered)&&(-1<u.indexOf(".")&&(u=(f=u.split(".")).shift(),f.sort()),l=u.indexOf(":")<0&&"on"+u,(t=t[S.expando]?t:new S.Event(u,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:S.makeArray(e,[t]),d=S.event.special[u]||{},o||!d.trigger||!1!==d.trigger.apply(i,e))){if(!o&&!d.noBubble&&!m(i)){for(a=d.delegateType||u,Ne.test(a+u)||(s=s.parentNode);s;s=s.parentNode)h.push(s),r=s;r===(i.ownerDocument||T)&&h.push(r.defaultView||r.parentWindow||k)}for(n=0;(s=h[n++])&&!t.isPropagationStopped();)p=s,t.type=1<n?a:d.bindType||u,(c=(Q.get(s,"events")||{})[t.type]&&Q.get(s,"handle"))&&c.apply(s,e),(c=l&&s[l])&&c.apply&&Y(s)&&(t.result=c.apply(s,e),!1===t.result&&t.preventDefault());return t.type=u,o||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),e)||!Y(i)||l&&_(i[u])&&!m(i)&&((r=i[l])&&(i[l]=null),S.event.triggered=u,t.isPropagationStopped()&&p.addEventListener(u,je),i[u](),t.isPropagationStopped()&&p.removeEventListener(u,je),S.event.triggered=void 0,r&&(i[l]=r)),t.result}},simulate:function(t,e,i){var o=S.extend(new S.Event,i,{type:t,isSimulated:!0});S.event.trigger(o,null,e)}}),S.fn.extend({trigger:function(t,e){return this.each(function(){S.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return S.event.trigger(t,e,i,!0)}}),y.focusin||S.each({focus:"focusin",blur:"focusout"},function(i,o){function n(t){S.event.simulate(o,t.target,S.event.fix(t))}S.event.special[o]={setup:function(){var t=this.ownerDocument||this,e=Q.access(t,o);e||t.addEventListener(i,n,!0),Q.access(t,o,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this,e=Q.access(t,o)-1;e?Q.access(t,o,e):(t.removeEventListener(i,n,!0),Q.remove(t,o))}}});var Pe=k.location,Oe=Date.now(),Le=/\?/;S.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new k.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||S.error("Invalid XML: "+t),e};var Me=/\[\]$/,Fe=/\r?\n/g,He=/^(?:submit|button|image|reset|file)$/i,qe=/^(?:input|select|textarea|keygen)/i;function Ie(i,t,o,n){var e;if(Array.isArray(t))S.each(t,function(t,e){o||Me.test(i)?n(i,e):Ie(i+"["+("object"==typeof e&&null!=e?t:"")+"]",e,o,n)});else if(o||"object"!==x(t))n(i,t);else for(e in t)Ie(i+"["+e+"]",t[e],o,n)}S.param=function(t,e){function i(t,e){var i=_(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)}var o,n=[];if(null==t)return"";if(Array.isArray(t)||t.jquery&&!S.isPlainObject(t))S.each(t,function(){i(this.name,this.value)});else for(o in t)Ie(o,t[o],e,i);return n.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=S.prop(this,"elements");return t?S.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!S(this).is(":disabled")&&qe.test(this.nodeName)&&!He.test(t)&&(this.checked||!ht.test(t))}).map(function(t,e){var i=S(this).val();return null==i?null:Array.isArray(i)?S.map(i,function(t){return{name:e.name,value:t.replace(Fe,"\r\n")}}):{name:e.name,value:i.replace(Fe,"\r\n")}}).get()}});var We=/%20/g,ze=/#.*$/,Re=/([?&])_=[^&]*/,Be=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ue=/^(?:GET|HEAD)$/,Xe=/^\/\//,Ve={},Ye={},Ge="*/".concat("*"),Qe=T.createElement("a");function Ke(s){return function(t,e){"string"!=typeof t&&(e=t,t="*");var i,o=0,n=t.toLowerCase().match(M)||[];if(_(e))for(;i=n[o++];)"+"===i[0]?(i=i.slice(1)||"*",(s[i]=s[i]||[]).unshift(e)):(s[i]=s[i]||[]).push(e)}}function Je(e,n,s,r){var a={},l=e===Ye;function c(t){var o;return a[t]=!0,S.each(e[t]||[],function(t,e){var i=e(n,s,r);return"string"!=typeof i||l||a[i]?l?!(o=i):void 0:(n.dataTypes.unshift(i),c(i),!1)}),o}return c(n.dataTypes[0])||!a["*"]&&c("*")}function Ze(t,e){var i,o,n=S.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((n[i]?t:o=o||{})[i]=e[i]);return o&&S.extend(!0,t,o),t}Qe.href=Pe.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Pe.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Pe.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ge,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ze(Ze(t,S.ajaxSettings),e):Ze(S.ajaxSettings,t)},ajaxPrefilter:Ke(Ve),ajaxTransport:Ke(Ye),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var d,p,h,i,u,o,f,m,n,s,g=S.ajaxSetup({},e),v=g.context||g,y=g.context&&(v.nodeType||v.jquery)?S(v):S.event,_=S.Deferred(),b=S.Callbacks("once memory"),x=g.statusCode||{},r={},a={},l="canceled",w={readyState:0,getResponseHeader:function(t){var e;if(f){if(!i)for(i={};e=Be.exec(h);)i[e[1].toLowerCase()+" "]=(i[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=i[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return f?h:null},setRequestHeader:function(t,e){return null==f&&(t=a[t.toLowerCase()]=a[t.toLowerCase()]||t,r[t]=e),this},overrideMimeType:function(t){return null==f&&(g.mimeType=t),this},statusCode:function(t){var e;if(t)if(f)w.always(t[w.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||l;return d&&d.abort(e),c(0,e),this}};if(_.promise(w),g.url=((t||g.url||Pe.href)+"").replace(Xe,Pe.protocol+"//"),g.type=e.method||e.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(M)||[""],null==g.crossDomain){o=T.createElement("a");try{o.href=g.url,o.href=o.href,g.crossDomain=Qe.protocol+"//"+Qe.host!=o.protocol+"//"+o.host}catch(t){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=S.param(g.data,g.traditional)),Je(Ve,g,e,w),f)return w;for(n in(m=S.event&&g.global)&&0==S.active++&&S.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!Ue.test(g.type),p=g.url.replace(ze,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(We,"+")):(s=g.url.slice(p.length),g.data&&(g.processData||"string"==typeof g.data)&&(p+=(Le.test(p)?"&":"?")+g.data,delete g.data),!1===g.cache&&(p=p.replace(Re,"$1"),s=(Le.test(p)?"&":"?")+"_="+Oe+++s),g.url=p+s),g.ifModified&&(S.lastModified[p]&&w.setRequestHeader("If-Modified-Since",S.lastModified[p]),S.etag[p]&&w.setRequestHeader("If-None-Match",S.etag[p])),(g.data&&g.hasContent&&!1!==g.contentType||e.contentType)&&w.setRequestHeader("Content-Type",g.contentType),w.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Ge+"; q=0.01":""):g.accepts["*"]),g.headers)w.setRequestHeader(n,g.headers[n]);if(g.beforeSend&&(!1===g.beforeSend.call(v,w,g)||f))return w.abort();if(l="abort",b.add(g.complete),w.done(g.success),w.fail(g.error),d=Je(Ye,g,e,w)){if(w.readyState=1,m&&y.trigger("ajaxSend",[w,g]),f)return w;g.async&&0<g.timeout&&(u=k.setTimeout(function(){w.abort("timeout")},g.timeout));try{f=!1,d.send(r,c)}catch(t){if(f)throw t;c(-1,t)}}else c(-1,"No Transport");function c(t,e,i,o){var n,s,r,a,l,c=e;f||(f=!0,u&&k.clearTimeout(u),d=void 0,h=o||"",w.readyState=0<t?4:0,n=200<=t&&t<300||304===t,i&&(a=function(t,e,i){for(var o,n,s,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===o&&(o=t.mimeType||e.getResponseHeader("Content-Type"));if(o)for(n in a)if(a[n]&&a[n].test(o)){l.unshift(n);break}if(l[0]in i)s=l[0];else{for(n in i){if(!l[0]||t.converters[n+" "+l[0]]){s=n;break}r=r||n}s=s||r}if(s)return s!==l[0]&&l.unshift(s),i[s]}(g,w,i)),a=function(t,e,i,o){var n,s,r,a,l,c={},d=t.dataTypes.slice();if(d[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(s=d.shift();s;)if(t.responseFields[s]&&(i[t.responseFields[s]]=e),!l&&o&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=d.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(r=c[l+" "+s]||c["* "+s]))for(n in c)if((a=n.split(" "))[1]===s&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[n]:!0!==c[n]&&(s=a[0],d.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}(g,a,w,n),n?(g.ifModified&&((l=w.getResponseHeader("Last-Modified"))&&(S.lastModified[p]=l),(l=w.getResponseHeader("etag"))&&(S.etag[p]=l)),204===t||"HEAD"===g.type?c="nocontent":304===t?c="notmodified":(c=a.state,s=a.data,n=!(r=a.error))):(r=c,!t&&c||(c="error",t<0&&(t=0))),w.status=t,w.statusText=(e||c)+"",n?_.resolveWith(v,[s,c,w]):_.rejectWith(v,[w,c,r]),w.statusCode(x),x=void 0,m&&y.trigger(n?"ajaxSuccess":"ajaxError",[w,g,n?s:r]),b.fireWith(v,[w,c]),m&&(y.trigger("ajaxComplete",[w,g]),--S.active||S.event.trigger("ajaxStop")))}return w},getJSON:function(t,e,i){return S.get(t,e,i,"json")},getScript:function(t,e){return S.get(t,void 0,e,"script")}}),S.each(["get","post"],function(t,n){S[n]=function(t,e,i,o){return _(e)&&(o=o||i,i=e,e=void 0),S.ajax(S.extend({url:t,type:n,dataType:o,data:e,success:i},S.isPlainObject(t)&&t))}}),S._evalUrl=function(t,e){return S.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){S.globalEval(t,e)}})},S.fn.extend({wrapAll:function(t){var e;return this[0]&&(_(t)&&(t=t.call(this[0])),e=S(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(i){return _(i)?this.each(function(t){S(this).wrapInner(i.call(this,t))}):this.each(function(){var t=S(this),e=t.contents();e.length?e.wrapAll(i):t.append(i)})},wrap:function(e){var i=_(e);return this.each(function(t){S(this).wrapAll(i?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){S(this).replaceWith(this.childNodes)}),this}}),S.expr.pseudos.hidden=function(t){return!S.expr.pseudos.visible(t)},S.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new k.XMLHttpRequest}catch(t){}};var ti={0:200,1223:204},ei=S.ajaxSettings.xhr();y.cors=!!ei&&"withCredentials"in ei,y.ajax=ei=!!ei,S.ajaxTransport(function(n){var s,r;if(y.cors||ei&&!n.crossDomain)return{send:function(t,e){var i,o=n.xhr();if(o.open(n.type,n.url,n.async,n.username,n.password),n.xhrFields)for(i in n.xhrFields)o[i]=n.xhrFields[i];for(i in n.mimeType&&o.overrideMimeType&&o.overrideMimeType(n.mimeType),n.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)o.setRequestHeader(i,t[i]);s=function(t){return function(){s&&(s=r=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===t?o.abort():"error"===t?"number"!=typeof o.status?e(0,"error"):e(o.status,o.statusText):e(ti[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=s(),r=o.onerror=o.ontimeout=s("error"),void 0!==o.onabort?o.onabort=r:o.onreadystatechange=function(){4===o.readyState&&k.setTimeout(function(){s&&r()})},s=s("abort");try{o.send(n.hasContent&&n.data||null)}catch(t){if(s)throw t}},abort:function(){s&&s()}}}),S.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return S.globalEval(t),t}}}),S.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),S.ajaxTransport("script",function(i){var o,n;if(i.crossDomain||i.scriptAttrs)return{send:function(t,e){o=S("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",n=function(t){o.remove(),n=null,t&&e("error"===t.type?404:200,t.type)}),T.head.appendChild(o[0])},abort:function(){n&&n()}}});var ii,oi=[],ni=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=oi.pop()||S.expando+"_"+Oe++;return this[t]=!0,t}}),S.ajaxPrefilter("json jsonp",function(t,e,i){var o,n,s,r=!1!==t.jsonp&&(ni.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&ni.test(t.data)&&"data");if(r||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=_(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,r?t[r]=t[r].replace(ni,"$1"+o):!1!==t.jsonp&&(t.url+=(Le.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return s||S.error(o+" was not called"),s[0]},t.dataTypes[0]="json",n=k[o],k[o]=function(){s=arguments},i.always(function(){void 0===n?S(k).removeProp(o):k[o]=n,t[o]&&(t.jsonpCallback=e.jsonpCallback,oi.push(o)),s&&_(n)&&n(s[0]),s=n=void 0}),"script"}),y.createHTMLDocument=((ii=T.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ii.childNodes.length),S.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(y.createHTMLDocument?((o=(e=T.implementation.createHTMLDocument("")).createElement("base")).href=T.location.href,e.head.appendChild(o)):e=T),s=!i&&[],(n=E.exec(t))?[e.createElement(n[1])]:(n=xt([t],e,s),s&&s.length&&S(s).remove(),S.merge([],n.childNodes)));var o,n,s},S.fn.load=function(t,e,i){var o,n,s,r=this,a=t.indexOf(" ");return-1<a&&(o=Ce(t.slice(a)),t=t.slice(0,a)),_(e)?(i=e,e=void 0):e&&"object"==typeof e&&(n="POST"),0<r.length&&S.ajax({url:t,type:n||"GET",dataType:"html",data:e}).done(function(t){s=arguments,r.html(o?S("<div>").append(S.parseHTML(t)).find(o):t)}).always(i&&function(t,e){r.each(function(){i.apply(this,s||[t.responseText,e,t])})}),this},S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){S.fn[e]=function(t){return this.on(e,t)}}),S.expr.pseudos.animated=function(e){return S.grep(S.timers,function(t){return e===t.elem}).length},S.offset={setOffset:function(t,e,i){var o,n,s,r,a,l,c=S.css(t,"position"),d=S(t),p={};"static"===c&&(t.style.position="relative"),a=d.offset(),s=S.css(t,"top"),l=S.css(t,"left"),n=("absolute"===c||"fixed"===c)&&-1<(s+l).indexOf("auto")?(r=(o=d.position()).top,o.left):(r=parseFloat(s)||0,parseFloat(l)||0),_(e)&&(e=e.call(t,i,S.extend({},a))),null!=e.top&&(p.top=e.top-a.top+r),null!=e.left&&(p.left=e.left-a.left+n),"using"in e?e.using.call(t,p):d.css(p)}},S.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){S.offset.setOffset(this,e,t)});var t,i,o=this[0];return o?o.getClientRects().length?(t=o.getBoundingClientRect(),i=o.ownerDocument.defaultView,{top:t.top+i.pageYOffset,left:t.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,o=this[0],n={top:0,left:0};if("fixed"===S.css(o,"position"))e=o.getBoundingClientRect();else{for(e=this.offset(),i=o.ownerDocument,t=o.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===S.css(t,"position");)t=t.parentNode;t&&t!==o&&1===t.nodeType&&((n=S(t).offset()).top+=S.css(t,"borderTopWidth",!0),n.left+=S.css(t,"borderLeftWidth",!0))}return{top:e.top-n.top-S.css(o,"marginTop",!0),left:e.left-n.left-S.css(o,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===S.css(t,"position");)t=t.offsetParent;return t||nt})}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var s="pageYOffset"===n;S.fn[e]=function(t){return R(this,function(t,e,i){var o;if(m(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[n]:t[e];o?o.scrollTo(s?o.pageXOffset:i,s?i:o.pageYOffset):t[e]=i},e,t,arguments.length)}}),S.each(["top","left"],function(t,i){S.cssHooks[i]=Zt(y.pixelPosition,function(t,e){if(e)return e=Jt(t,i),Vt.test(e)?S(t).position()[i]+"px":e})}),S.each({Height:"height",Width:"width"},function(r,a){S.each({padding:"inner"+r,content:a,"":"outer"+r},function(o,s){S.fn[s]=function(t,e){var i=arguments.length&&(o||"boolean"!=typeof t),n=o||(!0===t||!0===e?"margin":"border");return R(this,function(t,e,i){var o;return m(t)?0===s.indexOf("outer")?t["inner"+r]:t.document.documentElement["client"+r]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+r],o["scroll"+r],t.body["offset"+r],o["offset"+r],o["client"+r])):void 0===i?S.css(t,e,n):S.style(t,e,i,n)},a,i?t:void 0,i)}})}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,i){S.fn[i]=function(t,e){return 0<arguments.length?this.on(i,null,t,e):this.trigger(i)}}),S.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),S.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,o){return this.on(e,t,i,o)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)}}),S.proxy=function(t,e){var i,o,n;if("string"==typeof e&&(i=t[e],e=t,t=i),_(t))return o=a.call(arguments,2),(n=function(){return t.apply(e||this,o.concat(a.call(arguments)))}).guid=t.guid=t.guid||S.guid++,n},S.holdReady=function(t){t?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=A,S.isFunction=_,S.isWindow=m,S.camelCase=V,S.type=x,S.now=Date.now,S.isNumeric=function(t){var e=S.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return S});var si=k.jQuery,ri=k.$;return S.noConflict=function(t){return k.$===S&&(k.$=ri),t&&k.jQuery===S&&(k.jQuery=si),S},t||(k.jQuery=k.$=S),S}),function(e){"undefined"!=typeof jQuery&&jQuery||"function"!=typeof define||!define.amd?"undefined"!=typeof jQuery&&jQuery||"object"!=typeof exports?e(jQuery,document,window,navigator):e(require("jquery"),document,window,navigator):define(["jquery"],function(t){return e(t,document,window,navigator)})}(function(l,c,d,t,p){"use strict";var e,i,o=0,n=(i=/msie\s\d+/i,0<(e=t.userAgent).search(i)&&i.exec(e).toString().split(" ")[1]<9&&(l("html").addClass("lt-ie9"),!0));function s(t,e,i){this.VERSION="2.3.1",this.input=t,this.plugin_count=i,this.current_plugin=0,this.calc_count=0,this.update_tm=0,this.old_from=0,this.old_to=0,this.old_min_interval=null,this.raf_id=null,this.dragging=!1,this.force_redraw=!1,this.no_diapason=!1,this.has_tab_index=!0,this.is_key=!1,this.is_update=!1,this.is_start=!0,this.is_finish=!1,this.is_active=!1,this.is_resize=!1,this.is_click=!1,e=e||{},this.$cache={win:l(d),body:l(c.body),input:l(t),cont:null,rs:null,min:null,max:null,from:null,to:null,single:null,bar:null,line:null,s_single:null,s_from:null,s_to:null,shad_single:null,shad_from:null,shad_to:null,edge:null,grid:null,grid_labels:[]},this.coords={x_gap:0,x_pointer:0,w_rs:0,w_rs_old:0,w_handle:0,p_gap:0,p_gap_left:0,p_gap_right:0,p_step:0,p_pointer:0,p_handle:0,p_single_fake:0,p_single_real:0,p_from_fake:0,p_from_real:0,p_to_fake:0,p_to_real:0,p_bar_x:0,p_bar_w:0,grid_gap:0,big_num:0,big:[],big_w:[],big_p:[],big_x:[]},this.labels={w_min:0,w_max:0,w_from:0,w_to:0,w_single:0,p_min:0,p_max:0,p_from_fake:0,p_from_left:0,p_to_fake:0,p_to_left:0,p_single_fake:0,p_single_left:0};var o,n,s,r=this.$cache.input,a=r.prop("value");for(s in o={skin:"flat",type:"single",min:10,max:100,from:null,to:null,step:1,min_interval:0,max_interval:0,drag_interval:!1,values:[],p_values:[],from_fixed:!1,from_min:null,from_max:null,from_shadow:!1,to_fixed:!1,to_min:null,to_max:null,to_shadow:!1,prettify_enabled:!0,prettify_separator:" ",prettify:null,force_edges:!1,keyboard:!0,grid:!1,grid_margin:!0,grid_num:4,grid_snap:!1,hide_min_max:!1,hide_from_to:!1,prefix:"",postfix:"",max_postfix:"",decorate_both:!0,values_separator:" â ",input_values_separator:";",disable:!1,block:!1,extra_classes:"",scope:null,onStart:null,onChange:null,onFinish:null,onUpdate:null},"INPUT"!==r[0].nodeName&&console&&console.warn&&console.warn("Base element should be <input>!",r[0]),(n={skin:r.data("skin"),type:r.data("type"),min:r.data("min"),max:r.data("max"),from:r.data("from"),to:r.data("to"),step:r.data("step"),min_interval:r.data("minInterval"),max_interval:r.data("maxInterval"),drag_interval:r.data("dragInterval"),values:r.data("values"),from_fixed:r.data("fromFixed"),from_min:r.data("fromMin"),from_max:r.data("fromMax"),from_shadow:r.data("fromShadow"),to_fixed:r.data("toFixed"),to_min:r.data("toMin"),to_max:r.data("toMax"),to_shadow:r.data("toShadow"),prettify_enabled:r.data("prettifyEnabled"),prettify_separator:r.data("prettifySeparator"),force_edges:r.data("forceEdges"),keyboard:r.data("keyboard"),grid:r.data("grid"),grid_margin:r.data("gridMargin"),grid_num:r.data("gridNum"),grid_snap:r.data("gridSnap"),hide_min_max:r.data("hideMinMax"),hide_from_to:r.data("hideFromTo"),prefix:r.data("prefix"),postfix:r.data("postfix"),max_postfix:r.data("maxPostfix"),decorate_both:r.data("decorateBoth"),values_separator:r.data("valuesSeparator"),input_values_separator:r.data("inputValuesSeparator"),disable:r.data("disable"),block:r.data("block"),extra_classes:r.data("extraClasses")}).values=n.values&&n.values.split(","),n)n.hasOwnProperty(s)&&(n[s]!==p&&""!==n[s]||delete n[s]);a!==p&&""!==a&&((a=a.split(n.input_values_separator||e.input_values_separator||";"))[0]&&a[0]==+a[0]&&(a[0]=+a[0]),a[1]&&a[1]==+a[1]&&(a[1]=+a[1]),e&&e.values&&e.values.length?(o.from=a[0]&&e.values.indexOf(a[0]),o.to=a[1]&&e.values.indexOf(a[1])):(o.from=a[0]&&+a[0],o.to=a[1]&&+a[1])),l.extend(o,e),l.extend(o,n),this.options=o,this.update_check={},this.validate(),this.result={input:this.$cache.input,slider:null,min:this.options.min,max:this.options.max,from:this.options.from,from_percent:0,from_value:null,to:this.options.to,to_percent:0,to_value:null},this.init()}Function.prototype.bind||(Function.prototype.bind=function(o){var n=this,s=[].slice;if("function"!=typeof n)throw new TypeError;var r=s.call(arguments,1),a=function(){if(this instanceof a){var t=function(){};t.prototype=n.prototype;var e=new t,i=n.apply(e,r.concat(s.call(arguments)));return Object(i)===i?i:e}return n.apply(o,r.concat(s.call(arguments)))};return a}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t,e){var i;if(null==this)throw new TypeError('"this" is null or not defined');var o=Object(this),n=o.length>>>0;if(0==n)return-1;var s=+e||0;if(Math.abs(s)===1/0&&(s=0),n<=s)return-1;for(i=Math.max(0<=s?s:n-Math.abs(s),0);i<n;){if(i in o&&o[i]===t)return i;i++}return-1}),s.prototype={init:function(t){this.no_diapason=!1,this.coords.p_step=this.convertToPercent(this.options.step,!0),this.target="base",this.toggleInput(),this.append(),this.setMinMax(),t?(this.force_redraw=!0,this.calc(!0),this.callOnUpdate()):(this.force_redraw=!0,this.calc(!0),this.callOnStart()),this.updateScene()},append:function(){var t='<span class="irs irs--'+this.options.skin+" js-irs-"+this.plugin_count+" "+this.options.extra_classes+'"></span>';this.$cache.input.before(t),this.$cache.input.prop("readonly",!0),this.$cache.cont=this.$cache.input.prev(),this.result.slider=this.$cache.cont,this.$cache.cont.html('<span class="irs"><span class="irs-line" tabindex="0"></span><span class="irs-min">0</span><span class="irs-max">1</span><span class="irs-from">0</span><span class="irs-to">0</span><span class="irs-single">0</span></span><span class="irs-grid"></span>'),this.$cache.rs=this.$cache.cont.find(".irs"),this.$cache.min=this.$cache.cont.find(".irs-min"),this.$cache.max=this.$cache.cont.find(".irs-max"),this.$cache.from=this.$cache.cont.find(".irs-from"),this.$cache.to=this.$cache.cont.find(".irs-to"),this.$cache.single=this.$cache.cont.find(".irs-single"),this.$cache.line=this.$cache.cont.find(".irs-line"),this.$cache.grid=this.$cache.cont.find(".irs-grid"),"single"===this.options.type?(this.$cache.cont.append('<span class="irs-bar irs-bar--single"></span><span class="irs-shadow shadow-single"></span><span class="irs-handle single"><i></i><i></i><i></i></span>'),this.$cache.bar=this.$cache.cont.find(".irs-bar"),this.$cache.edge=this.$cache.cont.find(".irs-bar-edge"),this.$cache.s_single=this.$cache.cont.find(".single"),this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.shad_single=this.$cache.cont.find(".shadow-single")):(this.$cache.cont.append('<span class="irs-bar"></span><span class="irs-shadow shadow-from"></span><span class="irs-shadow shadow-to"></span><span class="irs-handle from"><i></i><i></i><i></i></span><span class="irs-handle to"><i></i><i></i><i></i></span>'),this.$cache.bar=this.$cache.cont.find(".irs-bar"),this.$cache.s_from=this.$cache.cont.find(".from"),this.$cache.s_to=this.$cache.cont.find(".to"),this.$cache.shad_from=this.$cache.cont.find(".shadow-from"),this.$cache.shad_to=this.$cache.cont.find(".shadow-to"),this.setTopHandler()),this.options.hide_from_to&&(this.$cache.from[0].style.display="none",this.$cache.to[0].style.display="none",this.$cache.single[0].style.display="none"),this.appendGrid(),this.options.disable?(this.appendDisableMask(),this.$cache.input[0].disabled=!0):(this.$cache.input[0].disabled=!1,this.removeDisableMask(),this.bindEvents()),this.options.disable||(this.options.block?this.appendDisableMask():this.removeDisableMask()),this.options.drag_interval&&(this.$cache.bar[0].style.cursor="ew-resize")},setTopHandler:function(){var t=this.options.min,e=this.options.max,i=this.options.from,o=this.options.to;t<i&&o===e?this.$cache.s_from.addClass("type_last"):o<e&&this.$cache.s_to.addClass("type_last")},changeLevel:function(t){switch(t){case"single":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_single_fake),this.$cache.s_single.addClass("state_hover");break;case"from":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.$cache.s_from.addClass("state_hover"),this.$cache.s_from.addClass("type_last"),this.$cache.s_to.removeClass("type_last");break;case"to":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_to_fake),this.$cache.s_to.addClass("state_hover"),this.$cache.s_to.addClass("type_last"),this.$cache.s_from.removeClass("type_last");break;case"both":this.coords.p_gap_left=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.coords.p_gap_right=this.toFixed(this.coords.p_to_fake-this.coords.p_pointer),this.$cache.s_to.removeClass("type_last"),this.$cache.s_from.removeClass("type_last")}},appendDisableMask:function(){this.$cache.cont.append('<span class="irs-disable-mask"></span>'),this.$cache.cont.addClass("irs-disabled")},removeDisableMask:function(){this.$cache.cont.remove(".irs-disable-mask"),this.$cache.cont.removeClass("irs-disabled")},remove:function(){this.$cache.cont.remove(),this.$cache.cont=null,this.$cache.line.off("keydown.irs_"+this.plugin_count),this.$cache.body.off("touchmove.irs_"+this.plugin_count),this.$cache.body.off("mousemove.irs_"+this.plugin_count),this.$cache.win.off("touchend.irs_"+this.plugin_count),this.$cache.win.off("mouseup.irs_"+this.plugin_count),n&&(this.$cache.body.off("mouseup.irs_"+this.plugin_count),this.$cache.body.off("mouseleave.irs_"+this.plugin_count)),this.$cache.grid_labels=[],this.coords.big=[],this.coords.big_w=[],this.coords.big_p=[],this.coords.big_x=[],cancelAnimationFrame(this.raf_id)},bindEvents:function(){this.no_diapason||(this.$cache.body.on("touchmove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.body.on("mousemove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.win.on("touchend.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.win.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.line.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.line.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.line.on("focus.irs_"+this.plugin_count,this.pointerFocus.bind(this)),this.options.drag_interval&&"double"===this.options.type?(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"both")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"both"))):(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))),"single"===this.options.type?(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.shad_single.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.edge.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_single.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))):(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))),this.options.keyboard&&this.$cache.line.on("keydown.irs_"+this.plugin_count,this.key.bind(this,"keyboard")),n&&(this.$cache.body.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.body.on("mouseleave.irs_"+this.plugin_count,this.pointerUp.bind(this))))},pointerFocus:function(t){var e,i;this.target||(e=(i="single"===this.options.type?this.$cache.single:this.$cache.from).offset().left,e+=i.width()/2-1,this.pointerClick("single",{preventDefault:function(){},pageX:e}))},pointerMove:function(t){if(this.dragging){var e=t.pageX||t.originalEvent.touches&&t.originalEvent.touches[0].pageX;this.coords.x_pointer=e-this.coords.x_gap,this.calc()}},pointerUp:function(t){this.current_plugin===this.plugin_count&&this.is_active&&(this.is_active=!1,this.$cache.cont.find(".state_hover").removeClass("state_hover"),this.force_redraw=!0,n&&l("*").prop("unselectable",!1),this.updateScene(),this.restoreOriginalMinInterval(),(l.contains(this.$cache.cont[0],t.target)||this.dragging)&&this.callOnFinish(),this.dragging=!1)},pointerDown:function(t,e){e.preventDefault();var i=e.pageX||e.originalEvent.touches&&e.originalEvent.touches[0].pageX;2!==e.button&&("both"===t&&this.setTempMinInterval(),t=t||this.target||"from",this.current_plugin=this.plugin_count,this.target=t,this.is_active=!0,this.dragging=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=i-this.coords.x_gap,this.calcPointerPercent(),this.changeLevel(t),n&&l("*").prop("unselectable",!0),this.$cache.line.trigger("focus"),this.updateScene())},pointerClick:function(t,e){e.preventDefault();var i=e.pageX||e.originalEvent.touches&&e.originalEvent.touches[0].pageX;2!==e.button&&(this.current_plugin=this.plugin_count,this.target=t,this.is_click=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=+(i-this.coords.x_gap).toFixed(),this.force_redraw=!0,this.calc(),this.$cache.line.trigger("focus"))},key:function(t,e){if(!(this.current_plugin!==this.plugin_count||e.altKey||e.ctrlKey||e.shiftKey||e.metaKey)){switch(e.which){case 83:case 65:case 40:case 37:e.preventDefault(),this.moveByKey(!1);break;case 87:case 68:case 38:case 39:e.preventDefault(),this.moveByKey(!0)}return!0}},moveByKey:function(t){var e=this.coords.p_pointer,i=(this.options.max-this.options.min)/100;i=this.options.step/i,t?e+=i:e-=i,this.coords.x_pointer=this.toFixed(this.coords.w_rs/100*e),this.is_key=!0,this.calc()},setMinMax:function(){if(this.options){if(this.options.hide_min_max)return this.$cache.min[0].style.display="none",void(this.$cache.max[0].style.display="none");if(this.options.values.length)this.$cache.min.html(this.decorate(this.options.p_values[this.options.min])),this.$cache.max.html(this.decorate(this.options.p_values[this.options.max]));else{var t=this._prettify(this.options.min),e=this._prettify(this.options.max);this.result.min_pretty=t,this.result.max_pretty=e,this.$cache.min.html(this.decorate(t,this.options.min)),this.$cache.max.html(this.decorate(e,this.options.max))}this.labels.w_min=this.$cache.min.outerWidth(!1),this.labels.w_max=this.$cache.max.outerWidth(!1)}},setTempMinInterval:function(){var t=this.result.to-this.result.from;null===this.old_min_interval&&(this.old_min_interval=this.options.min_interval),this.options.min_interval=t},restoreOriginalMinInterval:function(){null!==this.old_min_interval&&(this.options.min_interval=this.old_min_interval,this.old_min_interval=null)},calc:function(t){if(this.options&&(this.calc_count++,10!==this.calc_count&&!t||(this.calc_count=0,this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.calcHandlePercent()),this.coords.w_rs)){this.calcPointerPercent();var e=this.getHandleX();switch("both"===this.target&&(this.coords.p_gap=0,e=this.getHandleX()),"click"===this.target&&(this.coords.p_gap=this.coords.p_handle/2,e=this.getHandleX(),this.options.drag_interval?this.target="both_one":this.target=this.chooseHandle(e)),this.target){case"base":var i=(this.options.max-this.options.min)/100,o=(this.result.from-this.options.min)/i,n=(this.result.to-this.options.min)/i;this.coords.p_single_real=this.toFixed(o),this.coords.p_from_real=this.toFixed(o),this.coords.p_to_real=this.toFixed(n),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real),this.target=null;break;case"single":if(this.options.from_fixed)break;this.coords.p_single_real=this.convertToRealPercent(e),this.coords.p_single_real=this.calcWithStep(this.coords.p_single_real),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real);break;case"from":if(this.options.from_fixed)break;this.coords.p_from_real=this.convertToRealPercent(e),this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real>this.coords.p_to_real&&(this.coords.p_from_real=this.coords.p_to_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_real=this.checkMaxInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real);break;case"to":if(this.options.to_fixed)break;this.coords.p_to_real=this.convertToRealPercent(e),this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real<this.coords.p_from_real&&(this.coords.p_to_real=this.coords.p_from_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_real=this.checkMaxInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);break;case"both":if(this.options.from_fixed||this.options.to_fixed)break;e=this.toFixed(e+.001*this.coords.p_handle),this.coords.p_from_real=this.convertToRealPercent(e)-this.coords.p_gap_left,this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.convertToRealPercent(e)+this.coords.p_gap_right,this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);break;case"both_one":if(this.options.from_fixed||this.options.to_fixed)break;var s=this.convertToRealPercent(e),r=this.result.from_percent,a=this.result.to_percent-r,l=a/2,c=s-l,d=s+l;c<0&&(d=(c=0)+a),100<d&&(c=(d=100)-a),this.coords.p_from_real=this.calcWithStep(c),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.calcWithStep(d),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real)}"single"===this.options.type?(this.coords.p_bar_x=this.coords.p_handle/2,this.coords.p_bar_w=this.coords.p_single_fake,this.result.from_percent=this.coords.p_single_real,this.result.from=this.convertToValue(this.coords.p_single_real),this.result.from_pretty=this._prettify(this.result.from),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from])):(this.coords.p_bar_x=this.toFixed(this.coords.p_from_fake+this.coords.p_handle/2),this.coords.p_bar_w=this.toFixed(this.coords.p_to_fake-this.coords.p_from_fake),this.result.from_percent=this.coords.p_from_real,this.result.from=this.convertToValue(this.coords.p_from_real),this.result.from_pretty=this._prettify(this.result.from),this.result.to_percent=this.coords.p_to_real,this.result.to=this.convertToValue(this.coords.p_to_real),this.result.to_pretty=this._prettify(this.result.to),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from],this.result.to_value=this.options.values[this.result.to])),this.calcMinMax(),this.calcLabels()}},calcPointerPercent:function(){this.coords.w_rs?(this.coords.x_pointer<0||isNaN(this.coords.x_pointer)?this.coords.x_pointer=0:this.coords.x_pointer>this.coords.w_rs&&(this.coords.x_pointer=this.coords.w_rs),this.coords.p_pointer=this.toFixed(this.coords.x_pointer/this.coords.w_rs*100)):this.coords.p_pointer=0},convertToRealPercent:function(t){return t/(100-this.coords.p_handle)*100},convertToFakePercent:function(t){return t/100*(100-this.coords.p_handle)},getHandleX:function(){var t=100-this.coords.p_handle,e=this.toFixed(this.coords.p_pointer-this.coords.p_gap);return e<0?e=0:t<e&&(e=t),e},calcHandlePercent:function(){"single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100)},chooseHandle:function(t){return"single"===this.options.type?"single":this.coords.p_from_real+(this.coords.p_to_real-this.coords.p_from_real)/2<=t?this.options.to_fixed?"from":"to":this.options.from_fixed?"to":"from"},calcMinMax:function(){this.coords.w_rs&&(this.labels.p_min=this.labels.w_min/this.coords.w_rs*100,this.labels.p_max=this.labels.w_max/this.coords.w_rs*100)},calcLabels:function(){this.coords.w_rs&&!this.options.hide_from_to&&("single"===this.options.type?(this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=this.coords.p_single_fake+this.coords.p_handle/2-this.labels.p_single_fake/2):(this.labels.w_from=this.$cache.from.outerWidth(!1),this.labels.p_from_fake=this.labels.w_from/this.coords.w_rs*100,this.labels.p_from_left=this.coords.p_from_fake+this.coords.p_handle/2-this.labels.p_from_fake/2,this.labels.p_from_left=this.toFixed(this.labels.p_from_left),this.labels.p_from_left=this.checkEdges(this.labels.p_from_left,this.labels.p_from_fake),this.labels.w_to=this.$cache.to.outerWidth(!1),this.labels.p_to_fake=this.labels.w_to/this.coords.w_rs*100,this.labels.p_to_left=this.coords.p_to_fake+this.coords.p_handle/2-this.labels.p_to_fake/2,this.labels.p_to_left=this.toFixed(this.labels.p_to_left),this.labels.p_to_left=this.checkEdges(this.labels.p_to_left,this.labels.p_to_fake),this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=(this.labels.p_from_left+this.labels.p_to_left+this.labels.p_to_fake)/2-this.labels.p_single_fake/2,this.labels.p_single_left=this.toFixed(this.labels.p_single_left)),this.labels.p_single_left=this.checkEdges(this.labels.p_single_left,this.labels.p_single_fake))},updateScene:function(){this.raf_id&&(cancelAnimationFrame(this.raf_id),this.raf_id=null),clearTimeout(this.update_tm),this.update_tm=null,this.options&&(this.drawHandles(),this.is_active?this.raf_id=requestAnimationFrame(this.updateScene.bind(this)):this.update_tm=setTimeout(this.updateScene.bind(this),300))},drawHandles:function(){this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&(this.coords.w_rs!==this.coords.w_rs_old&&(this.target="base",this.is_resize=!0),this.coords.w_rs===this.coords.w_rs_old&&!this.force_redraw||(this.setMinMax(),this.calc(!0),this.drawLabels(),this.options.grid&&(this.calcGridMargin(),this.calcGridLabels()),this.force_redraw=!0,this.coords.w_rs_old=this.coords.w_rs,this.drawShadow()),this.coords.w_rs&&(this.dragging||this.force_redraw||this.is_key)&&((this.old_from!==this.result.from||this.old_to!==this.result.to||this.force_redraw||this.is_key)&&(this.drawLabels(),this.$cache.bar[0].style.left=this.coords.p_bar_x+"%",this.$cache.bar[0].style.width=this.coords.p_bar_w+"%","single"===this.options.type?(this.$cache.bar[0].style.left=0,this.$cache.bar[0].style.width=this.coords.p_bar_w+this.coords.p_bar_x+"%",this.$cache.s_single[0].style.left=this.coords.p_single_fake+"%"):(this.$cache.s_from[0].style.left=this.coords.p_from_fake+"%",this.$cache.s_to[0].style.left=this.coords.p_to_fake+"%",this.old_from===this.result.from&&!this.force_redraw||(this.$cache.from[0].style.left=this.labels.p_from_left+"%"),this.old_to===this.result.to&&!this.force_redraw||(this.$cache.to[0].style.left=this.labels.p_to_left+"%")),this.$cache.single[0].style.left=this.labels.p_single_left+"%",this.writeToInput(),this.old_from===this.result.from&&this.old_to===this.result.to||this.is_start||(this.$cache.input.trigger("change"),this.$cache.input.trigger("input")),this.old_from=this.result.from,this.old_to=this.result.to,this.is_resize||this.is_update||this.is_start||this.is_finish||this.callOnChange(),(this.is_key||this.is_click)&&(this.is_key=!1,this.is_click=!1,this.callOnFinish()),this.is_update=!1,this.is_resize=!1,this.is_finish=!1),this.is_start=!1,this.is_key=!1,this.is_click=!1,this.force_redraw=!1))},drawLabels:function(){if(this.options){var t,e,i,o,n,s=this.options.values.length,r=this.options.p_values;if(!this.options.hide_from_to)if("single"===this.options.type)t=s?this.decorate(r[this.result.from]):(o=this._prettify(this.result.from),this.decorate(o,this.result.from)),this.$cache.single.html(t),this.calcLabels(),this.labels.p_single_left<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",this.labels.p_single_left+this.labels.p_single_fake>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible";else{i=s?(this.options.decorate_both?(t=this.decorate(r[this.result.from]),t+=this.options.values_separator,t+=this.decorate(r[this.result.to])):t=this.decorate(r[this.result.from]+this.options.values_separator+r[this.result.to]),e=this.decorate(r[this.result.from]),this.decorate(r[this.result.to])):(o=this._prettify(this.result.from),n=this._prettify(this.result.to),this.options.decorate_both?(t=this.decorate(o,this.result.from),t+=this.options.values_separator,t+=this.decorate(n,this.result.to)):t=this.decorate(o+this.options.values_separator+n,this.result.to),e=this.decorate(o,this.result.from),this.decorate(n,this.result.to)),this.$cache.single.html(t),this.$cache.from.html(e),this.$cache.to.html(i),this.calcLabels();var a=Math.min(this.labels.p_single_left,this.labels.p_from_left),l=this.labels.p_single_left+this.labels.p_single_fake,c=this.labels.p_to_left+this.labels.p_to_fake,d=Math.max(l,c);this.labels.p_from_left+this.labels.p_from_fake>=this.labels.p_to_left?(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",d=this.result.from===this.result.to?("from"===this.target?this.$cache.from[0].style.visibility="visible":"to"===this.target?this.$cache.to[0].style.visibility="visible":this.target||(this.$cache.from[0].style.visibility="visible"),this.$cache.single[0].style.visibility="hidden",c):(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",Math.max(l,c))):(this.$cache.from[0].style.visibility="visible",this.$cache.to[0].style.visibility="visible",this.$cache.single[0].style.visibility="hidden"),a<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",d>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible"}}},drawShadow:function(){var t,e,i,o,n=this.options,s=this.$cache,r="number"==typeof n.from_min&&!isNaN(n.from_min),a="number"==typeof n.from_max&&!isNaN(n.from_max),l="number"==typeof n.to_min&&!isNaN(n.to_min),c="number"==typeof n.to_max&&!isNaN(n.to_max);"single"===n.type?n.from_shadow&&(r||a)?(t=this.convertToPercent(r?n.from_min:n.min),e=this.convertToPercent(a?n.from_max:n.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,s.shad_single[0].style.display="block",s.shad_single[0].style.left=t+"%",s.shad_single[0].style.width=e+"%"):s.shad_single[0].style.display="none":(n.from_shadow&&(r||a)?(t=this.convertToPercent(r?n.from_min:n.min),e=this.convertToPercent(a?n.from_max:n.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,s.shad_from[0].style.display="block",s.shad_from[0].style.left=t+"%",s.shad_from[0].style.width=e+"%"):s.shad_from[0].style.display="none",n.to_shadow&&(l||c)?(i=this.convertToPercent(l?n.to_min:n.min),o=this.convertToPercent(c?n.to_max:n.max)-i,i=this.toFixed(i-this.coords.p_handle/100*i),o=this.toFixed(o-this.coords.p_handle/100*o),i+=this.coords.p_handle/2,s.shad_to[0].style.display="block",s.shad_to[0].style.left=i+"%",s.shad_to[0].style.width=o+"%"):s.shad_to[0].style.display="none")},writeToInput:function(){"single"===this.options.type?(this.options.values.length?this.$cache.input.prop("value",this.result.from_value):this.$cache.input.prop("value",this.result.from),this.$cache.input.data("from",this.result.from)):(this.options.values.length?this.$cache.input.prop("value",this.result.from_value+this.options.input_values_separator+this.result.to_value):this.$cache.input.prop("value",this.result.from+this.options.input_values_separator+this.result.to),this.$cache.input.data("from",this.result.from),this.$cache.input.data("to",this.result.to))},callOnStart:function(){this.writeToInput(),this.options.onStart&&"function"==typeof this.options.onStart&&(this.options.scope?this.options.onStart.call(this.options.scope,this.result):this.options.onStart(this.result))},callOnChange:function(){this.writeToInput(),this.options.onChange&&"function"==typeof this.options.onChange&&(this.options.scope?this.options.onChange.call(this.options.scope,this.result):this.options.onChange(this.result))},callOnFinish:function(){this.writeToInput(),this.options.onFinish&&"function"==typeof this.options.onFinish&&(this.options.scope?this.options.onFinish.call(this.options.scope,this.result):this.options.onFinish(this.result))},callOnUpdate:function(){this.writeToInput(),this.options.onUpdate&&"function"==typeof this.options.onUpdate&&(this.options.scope?this.options.onUpdate.call(this.options.scope,this.result):this.options.onUpdate(this.result))},toggleInput:function(){this.$cache.input.toggleClass("irs-hidden-input"),this.has_tab_index?this.$cache.input.prop("tabindex",-1):this.$cache.input.removeProp("tabindex"),this.has_tab_index=!this.has_tab_index},convertToPercent:function(t,e){var i,o=this.options.max-this.options.min,n=o/100;return o?(i=(e?t:t-this.options.min)/n,this.toFixed(i)):(this.no_diapason=!0,0)},convertToValue:function(t){var e,i,o=this.options.min,n=this.options.max,s=o.toString().split(".")[1],r=n.toString().split(".")[1],a=0,l=0;if(0===t)return this.options.min;if(100===t)return this.options.max;s&&(a=e=s.length),r&&(a=i=r.length),e&&i&&(a=i<=e?e:i),o<0&&(o=+(o+(l=Math.abs(o))).toFixed(a),n=+(n+l).toFixed(a));var c,d=(n-o)/100*t+o,p=this.options.step.toString().split(".")[1];return d=p?+d.toFixed(p.length):(d/=this.options.step,+(d*=this.options.step).toFixed(0)),l&&(d-=l),(c=p?+d.toFixed(p.length):this.toFixed(d))<this.options.min?c=this.options.min:c>this.options.max&&(c=this.options.max),c},calcWithStep:function(t){var e=Math.round(t/this.coords.p_step)*this.coords.p_step;return 100<e&&(e=100),100===t&&(e=100),this.toFixed(e)},checkMinInterval:function(t,e,i){var o,n,s=this.options;return s.min_interval?(o=this.convertToValue(t),n=this.convertToValue(e),"from"===i?n-o<s.min_interval&&(o=n-s.min_interval):o-n<s.min_interval&&(o=n+s.min_interval),this.convertToPercent(o)):t},checkMaxInterval:function(t,e,i){var o,n,s=this.options;return s.max_interval?(o=this.convertToValue(t),n=this.convertToValue(e),"from"===i?n-o>s.max_interval&&(o=n-s.max_interval):o-n>s.max_interval&&(o=n+s.max_interval),this.convertToPercent(o)):t},checkDiapason:function(t,e,i){var o=this.convertToValue(t),n=this.options;return"number"!=typeof e&&(e=n.min),"number"!=typeof i&&(i=n.max),o<e&&(o=e),i<o&&(o=i),this.convertToPercent(o)},toFixed:function(t){return+t.toFixed(20)},_prettify:function(t){return this.options.prettify_enabled?this.options.prettify&&"function"==typeof this.options.prettify?this.options.prettify(t):this.prettify(t):t},prettify:function(t){return t.toString().replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g,"$1"+this.options.prettify_separator)},checkEdges:function(t,e){return this.options.force_edges&&(t<0?t=0:100-e<t&&(t=100-e)),this.toFixed(t)},validate:function(){var t,e,i=this.options,o=this.result,n=i.values,s=n.length;if("string"==typeof i.min&&(i.min=+i.min),"string"==typeof i.max&&(i.max=+i.max),"string"==typeof i.from&&(i.from=+i.from),"string"==typeof i.to&&(i.to=+i.to),"string"==typeof i.step&&(i.step=+i.step),"string"==typeof i.from_min&&(i.from_min=+i.from_min),"string"==typeof i.from_max&&(i.from_max=+i.from_max),"string"==typeof i.to_min&&(i.to_min=+i.to_min),"string"==typeof i.to_max&&(i.to_max=+i.to_max),"string"==typeof i.grid_num&&(i.grid_num=+i.grid_num),i.max<i.min&&(i.max=i.min),s)for(i.p_values=[],i.min=0,i.max=s-1,i.step=1,i.grid_num=i.max,i.grid_snap=!0,e=0;e<s;e++)t=+n[e],t=isNaN(t)?n[e]:(n[e]=t,this._prettify(t)),i.p_values.push(t);"number"==typeof i.from&&!isNaN(i.from)||(i.from=i.min),"number"==typeof i.to&&!isNaN(i.to)||(i.to=i.max),"single"===i.type?(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max)):(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max),i.to<i.min&&(i.to=i.min),i.to>i.max&&(i.to=i.max),this.update_check.from&&(this.update_check.from!==i.from&&i.from>i.to&&(i.from=i.to),this.update_check.to!==i.to&&i.to<i.from&&(i.to=i.from)),i.from>i.to&&(i.from=i.to),i.to<i.from&&(i.to=i.from)),("number"!=typeof i.step||isNaN(i.step)||!i.step||i.step<0)&&(i.step=1),"number"==typeof i.from_min&&i.from<i.from_min&&(i.from=i.from_min),"number"==typeof i.from_max&&i.from>i.from_max&&(i.from=i.from_max),"number"==typeof i.to_min&&i.to<i.to_min&&(i.to=i.to_min),"number"==typeof i.to_max&&i.from>i.to_max&&(i.to=i.to_max),o&&(o.min!==i.min&&(o.min=i.min),o.max!==i.max&&(o.max=i.max),(o.from<o.min||o.from>o.max)&&(o.from=i.from),(o.to<o.min||o.to>o.max)&&(o.to=i.to)),("number"!=typeof i.min_interval||isNaN(i.min_interval)||!i.min_interval||i.min_interval<0)&&(i.min_interval=0),("number"!=typeof i.max_interval||isNaN(i.max_interval)||!i.max_interval||i.max_interval<0)&&(i.max_interval=0),i.min_interval&&i.min_interval>i.max-i.min&&(i.min_interval=i.max-i.min),i.max_interval&&i.max_interval>i.max-i.min&&(i.max_interval=i.max-i.min)},decorate:function(t,e){var i="",o=this.options;return o.prefix&&(i+=o.prefix),i+=t,o.max_postfix&&(o.values.length&&t===o.p_values[o.max]?(i+=o.max_postfix,o.postfix&&(i+=" ")):e===o.max&&(i+=o.max_postfix,o.postfix&&(i+=" "))),o.postfix&&(i+=o.postfix),i},updateFrom:function(){this.result.from=this.options.from,this.result.from_percent=this.convertToPercent(this.result.from),this.result.from_pretty=this._prettify(this.result.from),this.options.values&&(this.result.from_value=this.options.values[this.result.from])},updateTo:function(){this.result.to=this.options.to,this.result.to_percent=this.convertToPercent(this.result.to),this.result.to_pretty=this._prettify(this.result.to),this.options.values&&(this.result.to_value=this.options.values[this.result.to])},updateResult:function(){this.result.min=this.options.min,this.result.max=this.options.max,this.updateFrom(),this.updateTo()},appendGrid:function(){if(this.options.grid){var t,e,i,o,n,s,r=this.options,a=r.max-r.min,l=r.grid_num,c=0,d=4,p="";for(this.calcGridMargin(),r.grid_snap&&(l=a/r.step),50<l&&(l=50),i=this.toFixed(100/l),4<l&&(d=3),7<l&&(d=2),14<l&&(d=1),28<l&&(d=0),t=0;t<l+1;t++){for(o=d,100<(c=this.toFixed(i*t))&&(c=100),n=((this.coords.big[t]=c)-i*(t-1))/(o+1),e=1;e<=o&&0!==c;e++)p+='<span class="irs-grid-pol small" style="left: '+this.toFixed(c-n*e)+'%"></span>';p+='<span class="irs-grid-pol" style="left: '+c+'%"></span>',s=this.convertToValue(c),p+='<span class="irs-grid-text js-grid-text-'+t+'" style="left: '+c+'%">'+(s=r.values.length?r.p_values[s]:this._prettify(s))+"</span>"}this.coords.big_num=Math.ceil(l+1),this.$cache.cont.addClass("irs-with-grid"),this.$cache.grid.html(p),this.cacheGridLabels()}},cacheGridLabels:function(){var t,e,i=this.coords.big_num;for(e=0;e<i;e++)t=this.$cache.grid.find(".js-grid-text-"+e),this.$cache.grid_labels.push(t);this.calcGridLabels()},calcGridLabels:function(){var t,e,i=[],o=[],n=this.coords.big_num;for(t=0;t<n;t++)this.coords.big_w[t]=this.$cache.grid_labels[t].outerWidth(!1),this.coords.big_p[t]=this.toFixed(this.coords.big_w[t]/this.coords.w_rs*100),this.coords.big_x[t]=this.toFixed(this.coords.big_p[t]/2),i[t]=this.toFixed(this.coords.big[t]-this.coords.big_x[t]),o[t]=this.toFixed(i[t]+this.coords.big_p[t]);for(this.options.force_edges&&(i[0]<-this.coords.grid_gap&&(i[0]=-this.coords.grid_gap,o[0]=this.toFixed(i[0]+this.coords.big_p[0]),this.coords.big_x[0]=this.coords.grid_gap),o[n-1]>100+this.coords.grid_gap&&(o[n-1]=100+this.coords.grid_gap,i[n-1]=this.toFixed(o[n-1]-this.coords.big_p[n-1]),this.coords.big_x[n-1]=this.toFixed(this.coords.big_p[n-1]-this.coords.grid_gap))),this.calcGridCollision(2,i,o),this.calcGridCollision(4,i,o),t=0;t<n;t++)e=this.$cache.grid_labels[t][0],this.coords.big_x[t]!==Number.POSITIVE_INFINITY&&(e.style.marginLeft=-this.coords.big_x[t]+"%")},calcGridCollision:function(t,e,i){var o,n,s,r=this.coords.big_num;for(o=0;o<r&&!(r<=(n=o+t/2));o+=t)s=this.$cache.grid_labels[n][0],i[o]<=e[n]?s.style.visibility="visible":s.style.visibility="hidden"},calcGridMargin:function(){this.options.grid_margin&&(this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&("single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100),this.coords.grid_gap=this.toFixed(this.coords.p_handle/2-.1),this.$cache.grid[0].style.width=this.toFixed(100-this.coords.p_handle)+"%",this.$cache.grid[0].style.left=this.coords.grid_gap+"%"))},update:function(t){this.input&&(this.is_update=!0,this.options.from=this.result.from,this.options.to=this.result.to,this.update_check.from=this.result.from,this.update_check.to=this.result.to,this.options=l.extend(this.options,t),this.validate(),this.updateResult(t),this.toggleInput(),this.remove(),this.init(!0))},reset:function(){this.input&&(this.updateResult(),this.update())},destroy:function(){this.input&&(this.toggleInput(),this.$cache.input.prop("readonly",!1),l.data(this.input,"ionRangeSlider",null),this.remove(),this.input=null,this.options=null)}},l.fn.ionRangeSlider=function(t){return this.each(function(){l.data(this,"ionRangeSlider")||l.data(this,"ionRangeSlider",new s(this,t,o++))})},function(){for(var s=0,t=["ms","moz","webkit","o"],e=0;e<t.length&&!d.requestAnimationFrame;++e)d.requestAnimationFrame=d[t[e]+"RequestAnimationFrame"],d.cancelAnimationFrame=d[t[e]+"CancelAnimationFrame"]||d[t[e]+"CancelRequestAnimationFrame"];d.requestAnimationFrame||(d.requestAnimationFrame=function(t,e){var i=(new Date).getTime(),o=Math.max(0,16-(i-s)),n=d.setTimeout(function(){t(i+o)},o);return s=i+o,n}),d.cancelAnimationFrame||(d.cancelAnimationFrame=function(t){clearTimeout(t)})}()}),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(c){"use strict";var n,r=window.Slick||{};(n=0,r=function(t,e){var i,o=this;o.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:c(t),appendDots:c(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,e){return c('<button type="button" />').text(e+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},o.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},c.extend(o,o.initials),o.activeBreakpoint=null,o.animType=null,o.animProp=null,o.breakpoints=[],o.breakpointSettings=[],o.cssTransitions=!1,o.focussed=!1,o.interrupted=!1,o.hidden="hidden",o.paused=!0,o.positionProp=null,o.respondTo=null,o.rowCount=1,o.shouldClick=!0,o.$slider=c(t),o.$slidesCache=null,o.transformType=null,o.transitionType=null,o.visibilityChange="visibilitychange",o.windowWidth=0,o.windowTimer=null,i=c(t).data("slick")||{},o.options=c.extend({},o.defaults,e,i),o.currentSlide=o.options.initialSlide,o.originalSettings=o.options,void 0!==document.mozHidden?(o.hidden="mozHidden",o.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(o.hidden="webkitHidden",o.visibilityChange="webkitvisibilitychange"),o.autoPlay=c.proxy(o.autoPlay,o),o.autoPlayClear=c.proxy(o.autoPlayClear,o),o.autoPlayIterator=c.proxy(o.autoPlayIterator,o),o.changeSlide=c.proxy(o.changeSlide,o),o.clickHandler=c.proxy(o.clickHandler,o),o.selectHandler=c.proxy(o.selectHandler,o),o.setPosition=c.proxy(o.setPosition,o),o.swipeHandler=c.proxy(o.swipeHandler,o),o.dragHandler=c.proxy(o.dragHandler,o),o.keyHandler=c.proxy(o.keyHandler,o),o.instanceUid=n++,o.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,o.registerBreakpoints(),o.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},r.prototype.addSlide=r.prototype.slickAdd=function(t,e,i){var o=this;if("boolean"==typeof e)i=e,e=null;else if(e<0||e>=o.slideCount)return!1;o.unload(),"number"==typeof e?0===e&&0===o.$slides.length?c(t).appendTo(o.$slideTrack):i?c(t).insertBefore(o.$slides.eq(e)):c(t).insertAfter(o.$slides.eq(e)):!0===i?c(t).prependTo(o.$slideTrack):c(t).appendTo(o.$slideTrack),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slides.each(function(t,e){c(e).attr("data-slick-index",t)}),o.$slidesCache=o.$slides,o.reinit()},r.prototype.animateHeight=function(){var t=this;if(1===t.options.slidesToShow&&!0===t.options.adaptiveHeight&&!1===t.options.vertical){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.animate({height:e},t.options.speed)}},r.prototype.animateSlide=function(t,e){var i={},o=this;o.animateHeight(),!0===o.options.rtl&&!1===o.options.vertical&&(t=-t),!1===o.transformsEnabled?!1===o.options.vertical?o.$slideTrack.animate({left:t},o.options.speed,o.options.easing,e):o.$slideTrack.animate({top:t},o.options.speed,o.options.easing,e):!1===o.cssTransitions?(!0===o.options.rtl&&(o.currentLeft=-o.currentLeft),c({animStart:o.currentLeft}).animate({animStart:t},{duration:o.options.speed,easing:o.options.easing,step:function(t){t=Math.ceil(t),!1===o.options.vertical?i[o.animType]="translate("+t+"px, 0px)":i[o.animType]="translate(0px,"+t+"px)",o.$slideTrack.css(i)},complete:function(){e&&e.call()}})):(o.applyTransition(),t=Math.ceil(t),!1===o.options.vertical?i[o.animType]="translate3d("+t+"px, 0px, 0px)":i[o.animType]="translate3d(0px,"+t+"px, 0px)",o.$slideTrack.css(i),e&&setTimeout(function(){o.disableTransition(),e.call()},o.options.speed))},r.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t&&null!==t&&(t=c(t).not(this.$slider)),t},r.prototype.asNavFor=function(e){var t=this.getNavTarget();null!==t&&"object"==typeof t&&t.each(function(){var t=c(this).slick("getSlick");t.unslicked||t.slideHandler(e,!0)})},r.prototype.applyTransition=function(t){var e=this,i={};!1===e.options.fade?i[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:i[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,!1===e.options.fade?e.$slideTrack.css(i):e.$slides.eq(t).css(i)},r.prototype.autoPlay=function(){var t=this;t.autoPlayClear(),t.slideCount>t.options.slidesToShow&&(t.autoPlayTimer=setInterval(t.autoPlayIterator,t.options.autoplaySpeed))},r.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},r.prototype.autoPlayIterator=function(){var t=this,e=t.currentSlide+t.options.slidesToScroll;t.paused||t.interrupted||t.focussed||(!1===t.options.infinite&&(1===t.direction&&t.currentSlide+1===t.slideCount-1?t.direction=0:0===t.direction&&(e=t.currentSlide-t.options.slidesToScroll,t.currentSlide-1==0&&(t.direction=1))),t.slideHandler(e))},r.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=c(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=c(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},r.prototype.buildDots=function(){var t,e,i=this;if(!0===i.options.dots){for(i.$slider.addClass("slick-dotted"),e=c("<ul />").addClass(i.options.dotsClass),t=0;t<=i.getDotCount();t+=1)e.append(c("<li />").append(i.options.customPaging.call(this,i,t)));i.$dots=e.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},r.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each(function(t,e){c(e).attr("data-slick-index",t).data("originalStyling",c(e).attr("style")||"")}),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?c('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),c("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},r.prototype.buildRows=function(){var t,e,i,o,n,s,r,a=this;if(o=document.createDocumentFragment(),s=a.$slider.children(),1<a.options.rows){for(r=a.options.slidesPerRow*a.options.rows,n=Math.ceil(s.length/r),t=0;t<n;t++){var l=document.createElement("div");for(e=0;e<a.options.rows;e++){var c=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var d=t*r+(e*a.options.slidesPerRow+i);s.get(d)&&c.appendChild(s.get(d))}l.appendChild(c)}o.appendChild(l)}a.$slider.empty().append(o),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},r.prototype.checkResponsive=function(t,e){var i,o,n,s=this,r=!1,a=s.$slider.width(),l=window.innerWidth||c(window).width();if("window"===s.respondTo?n=l:"slider"===s.respondTo?n=a:"min"===s.respondTo&&(n=Math.min(l,a)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){for(i in o=null,s.breakpoints)s.breakpoints.hasOwnProperty(i)&&(!1===s.originalSettings.mobileFirst?n<s.breakpoints[i]&&(o=s.breakpoints[i]):n>s.breakpoints[i]&&(o=s.breakpoints[i]));null!==o?null!==s.activeBreakpoint?o===s.activeBreakpoint&&!e||(s.activeBreakpoint=o,"unslick"===s.breakpointSettings[o]?s.unslick(o):(s.options=c.extend({},s.originalSettings,s.breakpointSettings[o]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),r=o):(s.activeBreakpoint=o,"unslick"===s.breakpointSettings[o]?s.unslick(o):(s.options=c.extend({},s.originalSettings,s.breakpointSettings[o]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),r=o):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t),r=o),t||!1===r||s.$slider.trigger("breakpoint",[s,r])}},r.prototype.changeSlide=function(t,e){var i,o,n=this,s=c(t.currentTarget);switch(s.is("a")&&t.preventDefault(),s.is("li")||(s=s.closest("li")),i=n.slideCount%n.options.slidesToScroll!=0?0:(n.slideCount-n.currentSlide)%n.options.slidesToScroll,t.data.message){case"previous":o=0==i?n.options.slidesToScroll:n.options.slidesToShow-i,n.slideCount>n.options.slidesToShow&&n.slideHandler(n.currentSlide-o,!1,e);break;case"next":o=0==i?n.options.slidesToScroll:i,n.slideCount>n.options.slidesToShow&&n.slideHandler(n.currentSlide+o,!1,e);break;case"index":var r=0===t.data.index?0:t.data.index||s.index()*n.options.slidesToScroll;n.slideHandler(n.checkNavigable(r),!1,e),s.children().trigger("focus");break;default:return}},r.prototype.checkNavigable=function(t){var e,i;if(i=0,t>(e=this.getNavigableIndexes())[e.length-1])t=e[e.length-1];else for(var o in e){if(t<e[o]){t=i;break}i=e[o]}return t},r.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(c("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",c.proxy(t.interrupt,t,!0)).off("mouseleave.slick",c.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),c(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().off("click.slick",t.selectHandler),c(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),c(window).off("resize.slick.slick-"+t.instanceUid,t.resize),c("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),c(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},r.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",c.proxy(t.interrupt,t,!1))},r.prototype.cleanUpRows=function(){var t;1<this.options.rows&&((t=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(t))},r.prototype.clickHandler=function(t){!1===this.shouldClick&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},r.prototype.destroy=function(t){var e=this;e.autoPlayClear(),e.touchObject={},e.cleanUpEvents(),c(".slick-cloned",e.$slider).detach(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.$prevArrow.length&&(e.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove()),e.$nextArrow&&e.$nextArrow.length&&(e.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove()),e.$slides&&(e.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){c(this).attr("style",c(this).data("originalStyling"))}),e.$slideTrack.children(this.options.slide).detach(),e.$slideTrack.detach(),e.$list.detach(),e.$slider.append(e.$slides)),e.cleanUpRows(),e.$slider.removeClass("slick-slider"),e.$slider.removeClass("slick-initialized"),e.$slider.removeClass("slick-dotted"),e.unslicked=!0,t||e.$slider.trigger("destroy",[e])},r.prototype.disableTransition=function(t){var e={};e[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(e):this.$slides.eq(t).css(e)},r.prototype.fadeSlide=function(t,e){var i=this;!1===i.cssTransitions?(i.$slides.eq(t).css({zIndex:i.options.zIndex}),i.$slides.eq(t).animate({opacity:1},i.options.speed,i.options.easing,e)):(i.applyTransition(t),i.$slides.eq(t).css({opacity:1,zIndex:i.options.zIndex}),e&&setTimeout(function(){i.disableTransition(t),e.call()},i.options.speed))},r.prototype.fadeSlideOut=function(t){var e=this;!1===e.cssTransitions?e.$slides.eq(t).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(t),e.$slides.eq(t).css({opacity:0,zIndex:e.options.zIndex-2}))},r.prototype.filterSlides=r.prototype.slickFilter=function(t){var e=this;null!==t&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(t).appendTo(e.$slideTrack),e.reinit())},r.prototype.focusHandler=function(){var i=this;i.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(t){t.stopImmediatePropagation();var e=c(this);setTimeout(function(){i.options.pauseOnFocus&&(i.focussed=e.is(":focus"),i.autoPlay())},0)})},r.prototype.getCurrent=r.prototype.slickCurrentSlide=function(){return this.currentSlide},r.prototype.getDotCount=function(){var t=this,e=0,i=0,o=0;if(!0===t.options.infinite)if(t.slideCount<=t.options.slidesToShow)++o;else for(;e<t.slideCount;)++o,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else if(!0===t.options.centerMode)o=t.slideCount;else if(t.options.asNavFor)for(;e<t.slideCount;)++o,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else o=1+Math.ceil((t.slideCount-t.options.slidesToShow)/t.options.slidesToScroll);return o-1},r.prototype.getLeft=function(t){var e,i,o,n,s=this,r=0;return s.slideOffset=0,i=s.$slides.first().outerHeight(!0),!0===s.options.infinite?(s.slideCount>s.options.slidesToShow&&(s.slideOffset=s.slideWidth*s.options.slidesToShow*-1,n=-1,!0===s.options.vertical&&!0===s.options.centerMode&&(2===s.options.slidesToShow?n=-1.5:1===s.options.slidesToShow&&(n=-2)),r=i*s.options.slidesToShow*n),s.slideCount%s.options.slidesToScroll!=0&&t+s.options.slidesToScroll>s.slideCount&&s.slideCount>s.options.slidesToShow&&(r=t>s.slideCount?(s.slideOffset=(s.options.slidesToShow-(t-s.slideCount))*s.slideWidth*-1,(s.options.slidesToShow-(t-s.slideCount))*i*-1):(s.slideOffset=s.slideCount%s.options.slidesToScroll*s.slideWidth*-1,s.slideCount%s.options.slidesToScroll*i*-1))):t+s.options.slidesToShow>s.slideCount&&(s.slideOffset=(t+s.options.slidesToShow-s.slideCount)*s.slideWidth,r=(t+s.options.slidesToShow-s.slideCount)*i),s.slideCount<=s.options.slidesToShow&&(r=s.slideOffset=0),!0===s.options.centerMode&&s.slideCount<=s.options.slidesToShow?s.slideOffset=s.slideWidth*Math.floor(s.options.slidesToShow)/2-s.slideWidth*s.slideCount/2:!0===s.options.centerMode&&!0===s.options.infinite?s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)-s.slideWidth:!0===s.options.centerMode&&(s.slideOffset=0,s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)),e=!1===s.options.vertical?t*s.slideWidth*-1+s.slideOffset:t*i*-1+r,!0===s.options.variableWidth&&(o=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(t):s.$slideTrack.children(".slick-slide").eq(t+s.options.slidesToShow),e=!0===s.options.rtl?o[0]?-1*(s.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,!0===s.options.centerMode&&(o=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(t):s.$slideTrack.children(".slick-slide").eq(t+s.options.slidesToShow+1),e=!0===s.options.rtl?o[0]?-1*(s.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,e+=(s.$list.width()-o.outerWidth())/2)),e},r.prototype.getOption=r.prototype.slickGetOption=function(t){return this.options[t]},r.prototype.getNavigableIndexes=function(){var t,e=this,i=0,o=0,n=[];for(t=!1===e.options.infinite?e.slideCount:(i=-1*e.options.slidesToScroll,o=-1*e.options.slidesToScroll,2*e.slideCount);i<t;)n.push(i),i=o+e.options.slidesToScroll,o+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;return n},r.prototype.getSlick=function(){return this},r.prototype.getSlideCount=function(){var i,o,n=this;return o=!0===n.options.centerMode?n.slideWidth*Math.floor(n.options.slidesToShow/2):0,!0===n.options.swipeToSlide?(n.$slideTrack.find(".slick-slide").each(function(t,e){if(e.offsetLeft-o+c(e).outerWidth()/2>-1*n.swipeLeft)return i=e,!1}),Math.abs(c(i).attr("data-slick-index")-n.currentSlide)||1):n.options.slidesToScroll},r.prototype.goTo=r.prototype.slickGoTo=function(t,e){this.changeSlide({data:{message:"index",index:parseInt(t)}},e)},r.prototype.init=function(t){var e=this;c(e.$slider).hasClass("slick-initialized")||(c(e.$slider).addClass("slick-initialized"),e.buildRows(),e.buildOut(),e.setProps(),e.startLoad(),e.loadSlider(),e.initializeEvents(),e.updateArrows(),e.updateDots(),e.checkResponsive(!0),e.focusHandler()),t&&e.$slider.trigger("init",[e]),!0===e.options.accessibility&&e.initADA(),e.options.autoplay&&(e.paused=!1,e.autoPlay())},r.prototype.initADA=function(){var i=this,o=Math.ceil(i.slideCount/i.options.slidesToShow),n=i.getNavigableIndexes().filter(function(t){return 0<=t&&t<i.slideCount});i.$slides.add(i.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==i.$dots&&(i.$slides.not(i.$slideTrack.find(".slick-cloned")).each(function(t){var e=n.indexOf(t);c(this).attr({role:"tabpanel",id:"slick-slide"+i.instanceUid+t,tabindex:-1}),-1!==e&&c(this).attr({"aria-describedby":"slick-slide-control"+i.instanceUid+e})}),i.$dots.attr("role","tablist").find("li").each(function(t){var e=n[t];c(this).attr({role:"presentation"}),c(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+i.instanceUid+t,"aria-controls":"slick-slide"+i.instanceUid+e,"aria-label":t+1+" of "+o,"aria-selected":null,tabindex:"-1"})}).eq(i.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var t=i.currentSlide,e=t+i.options.slidesToShow;t<e;t++)i.$slides.eq(t).attr("tabindex",0);i.activateADA()},r.prototype.initArrowEvents=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},t.changeSlide),t.$nextArrow.off("click.slick").on("click.slick",{message:"next"},t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow.on("keydown.slick",t.keyHandler),t.$nextArrow.on("keydown.slick",t.keyHandler)))},r.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&(c("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&c("li",t.$dots).on("mouseenter.slick",c.proxy(t.interrupt,t,!0)).on("mouseleave.slick",c.proxy(t.interrupt,t,!1))},r.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",c.proxy(t.interrupt,t,!1)))},r.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),c(document).on(t.visibilityChange,c.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),c(window).on("orientationchange.slick.slick-"+t.instanceUid,c.proxy(t.orientationChange,t)),c(window).on("resize.slick.slick-"+t.instanceUid,c.proxy(t.resize,t)),c("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),c(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),c(t.setPosition)},r.prototype.initUI=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.show(),t.$nextArrow.show()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.show()},r.prototype.keyHandler=function(t){var e=this;t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&!0===e.options.accessibility?e.changeSlide({data:{message:!0===e.options.rtl?"next":"previous"}}):39===t.keyCode&&!0===e.options.accessibility&&e.changeSlide({data:{message:!0===e.options.rtl?"previous":"next"}}))},r.prototype.lazyLoad=function(){function t(t){c("img[data-lazy]",t).each(function(){var t=c(this),e=c(this).attr("data-lazy"),i=c(this).attr("data-srcset"),o=c(this).attr("data-sizes")||s.$slider.attr("data-sizes"),n=document.createElement("img");n.onload=function(){t.animate({opacity:0},100,function(){i&&(t.attr("srcset",i),o&&t.attr("sizes",o)),t.attr("src",e).animate({opacity:1},200,function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),s.$slider.trigger("lazyLoaded",[s,t,e])})},n.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,t,e])},n.src=e})}var e,i,o,s=this;if(!0===s.options.centerMode?o=!0===s.options.infinite?(i=s.currentSlide+(s.options.slidesToShow/2+1))+s.options.slidesToShow+2:(i=Math.max(0,s.currentSlide-(s.options.slidesToShow/2+1)),s.options.slidesToShow/2+1+2+s.currentSlide):(i=s.options.infinite?s.options.slidesToShow+s.currentSlide:s.currentSlide,o=Math.ceil(i+s.options.slidesToShow),!0===s.options.fade&&(0<i&&i--,o<=s.slideCount&&o++)),e=s.$slider.find(".slick-slide").slice(i,o),"anticipated"===s.options.lazyLoad)for(var n=i-1,r=o,a=s.$slider.find(".slick-slide"),l=0;l<s.options.slidesToScroll;l++)n<0&&(n=s.slideCount-1),e=(e=e.add(a.eq(n))).add(a.eq(r)),n--,r++;t(e),s.slideCount<=s.options.slidesToShow?t(s.$slider.find(".slick-slide")):s.currentSlide>=s.slideCount-s.options.slidesToShow?t(s.$slider.find(".slick-cloned").slice(0,s.options.slidesToShow)):0===s.currentSlide&&t(s.$slider.find(".slick-cloned").slice(-1*s.options.slidesToShow))},r.prototype.loadSlider=function(){var t=this;t.setPosition(),t.$slideTrack.css({opacity:1}),t.$slider.removeClass("slick-loading"),t.initUI(),"progressive"===t.options.lazyLoad&&t.progressiveLazyLoad()},r.prototype.next=r.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},r.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},r.prototype.pause=r.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},r.prototype.play=r.prototype.slickPlay=function(){var t=this;t.autoPlay(),t.options.autoplay=!0,t.paused=!1,t.focussed=!1,t.interrupted=!1},r.prototype.postSlide=function(t){var e=this;e.unslicked||(e.$slider.trigger("afterChange",[e,t]),e.animating=!1,e.slideCount>e.options.slidesToShow&&e.setPosition(),e.swipeLeft=null,e.options.autoplay&&e.autoPlay(),!0===e.options.accessibility&&(e.initADA(),e.options.focusOnChange&&c(e.$slides.get(e.currentSlide)).attr("tabindex",0).focus()))},r.prototype.prev=r.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},r.prototype.preventDefault=function(t){t.preventDefault()},r.prototype.progressiveLazyLoad=function(t){t=t||1;var e,i,o,n,s,r=this,a=c("img[data-lazy]",r.$slider);a.length?(e=a.first(),i=e.attr("data-lazy"),o=e.attr("data-srcset"),n=e.attr("data-sizes")||r.$slider.attr("data-sizes"),(s=document.createElement("img")).onload=function(){o&&(e.attr("srcset",o),n&&e.attr("sizes",n)),e.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===r.options.adaptiveHeight&&r.setPosition(),r.$slider.trigger("lazyLoaded",[r,e,i]),r.progressiveLazyLoad()},s.onerror=function(){t<3?setTimeout(function(){r.progressiveLazyLoad(t+1)},500):(e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,e,i]),r.progressiveLazyLoad())},s.src=i):r.$slider.trigger("allImagesLoaded",[r])},r.prototype.refresh=function(t){var e,i,o=this;i=o.slideCount-o.options.slidesToShow,!o.options.infinite&&o.currentSlide>i&&(o.currentSlide=i),o.slideCount<=o.options.slidesToShow&&(o.currentSlide=0),e=o.currentSlide,o.destroy(!0),c.extend(o,o.initials,{currentSlide:e}),o.init(),t||o.changeSlide({data:{message:"index",index:e}},!1)},r.prototype.registerBreakpoints=function(){var t,e,i,o=this,n=o.options.responsive||null;if("array"===c.type(n)&&n.length){for(t in o.respondTo=o.options.respondTo||"window",n)if(i=o.breakpoints.length-1,n.hasOwnProperty(t)){for(e=n[t].breakpoint;0<=i;)o.breakpoints[i]&&o.breakpoints[i]===e&&o.breakpoints.splice(i,1),i--;o.breakpoints.push(e),o.breakpointSettings[e]=n[t].settings}o.breakpoints.sort(function(t,e){return o.options.mobileFirst?t-e:e-t})}},r.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},r.prototype.resize=function(){var t=this;c(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout(function(){t.windowWidth=c(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()},50))},r.prototype.removeSlide=r.prototype.slickRemove=function(t,e,i){var o=this;if(t="boolean"==typeof t?!0===(e=t)?0:o.slideCount-1:!0===e?--t:t,o.slideCount<1||t<0||t>o.slideCount-1)return!1;o.unload(),!0===i?o.$slideTrack.children().remove():o.$slideTrack.children(this.options.slide).eq(t).remove(),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slidesCache=o.$slides,o.reinit()},r.prototype.setCSS=function(t){var e,i,o=this,n={};!0===o.options.rtl&&(t=-t),e="left"==o.positionProp?Math.ceil(t)+"px":"0px",i="top"==o.positionProp?Math.ceil(t)+"px":"0px",n[o.positionProp]=t,!1===o.transformsEnabled||(!(n={})===o.cssTransitions?n[o.animType]="translate("+e+", "+i+")":n[o.animType]="translate3d("+e+", "+i+", 0px)"),o.$slideTrack.css(n)},r.prototype.setDimensions=function(){var t=this;!1===t.options.vertical?!0===t.options.centerMode&&t.$list.css({padding:"0px "+t.options.centerPadding}):(t.$list.height(t.$slides.first().outerHeight(!0)*t.options.slidesToShow),!0===t.options.centerMode&&t.$list.css({padding:t.options.centerPadding+" 0px"})),t.listWidth=t.$list.width(),t.listHeight=t.$list.height(),!1===t.options.vertical&&!1===t.options.variableWidth?(t.slideWidth=Math.ceil(t.listWidth/t.options.slidesToShow),t.$slideTrack.width(Math.ceil(t.slideWidth*t.$slideTrack.children(".slick-slide").length))):!0===t.options.variableWidth?t.$slideTrack.width(5e3*t.slideCount):(t.slideWidth=Math.ceil(t.listWidth),t.$slideTrack.height(Math.ceil(t.$slides.first().outerHeight(!0)*t.$slideTrack.children(".slick-slide").length)));var e=t.$slides.first().outerWidth(!0)-t.$slides.first().width();!1===t.options.variableWidth&&t.$slideTrack.children(".slick-slide").width(t.slideWidth-e)},r.prototype.setFade=function(){var i,o=this;o.$slides.each(function(t,e){i=o.slideWidth*t*-1,!0===o.options.rtl?c(e).css({position:"relative",right:i,top:0,zIndex:o.options.zIndex-2,opacity:0}):c(e).css({position:"relative",left:i,top:0,zIndex:o.options.zIndex-2,opacity:0})}),o.$slides.eq(o.currentSlide).css({zIndex:o.options.zIndex-1,opacity:1})},r.prototype.setHeight=function(){var t=this;if(1===t.options.slidesToShow&&!0===t.options.adaptiveHeight&&!1===t.options.vertical){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.css("height",e)}},r.prototype.setOption=r.prototype.slickSetOption=function(){var t,e,i,o,n,s=this,r=!1;if("object"===c.type(arguments[0])?(i=arguments[0],r=arguments[1],n="multiple"):"string"===c.type(arguments[0])&&(o=arguments[1],r=arguments[2],"responsive"===(i=arguments[0])&&"array"===c.type(arguments[1])?n="responsive":void 0!==arguments[1]&&(n="single")),"single"===n)s.options[i]=o;else if("multiple"===n)c.each(i,function(t,e){s.options[t]=e});else if("responsive"===n)for(e in o)if("array"!==c.type(s.options.responsive))s.options.responsive=[o[e]];else{for(t=s.options.responsive.length-1;0<=t;)s.options.responsive[t].breakpoint===o[e].breakpoint&&s.options.responsive.splice(t,1),t--;s.options.responsive.push(o[e])}r&&(s.unload(),s.reinit())},r.prototype.setPosition=function(){var t=this;t.setDimensions(),t.setHeight(),!1===t.options.fade?t.setCSS(t.getLeft(t.currentSlide)):t.setFade(),t.$slider.trigger("setPosition",[t])},r.prototype.setProps=function(){var t=this,e=document.body.style;t.positionProp=!0===t.options.vertical?"top":"left","top"===t.positionProp?t.$slider.addClass("slick-vertical"):t.$slider.removeClass("slick-vertical"),void 0===e.WebkitTransition&&void 0===e.MozTransition&&void 0===e.msTransition||!0===t.options.useCSS&&(t.cssTransitions=!0),t.options.fade&&("number"==typeof t.options.zIndex?t.options.zIndex<3&&(t.options.zIndex=3):t.options.zIndex=t.defaults.zIndex),void 0!==e.OTransform&&(t.animType="OTransform",t.transformType="-o-transform",t.transitionType="OTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.MozTransform&&(t.animType="MozTransform",t.transformType="-moz-transform",t.transitionType="MozTransition",void 0===e.perspectiveProperty&&void 0===e.MozPerspective&&(t.animType=!1)),void 0!==e.webkitTransform&&(t.animType="webkitTransform",t.transformType="-webkit-transform",t.transitionType="webkitTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.msTransform&&(t.animType="msTransform",t.transformType="-ms-transform",t.transitionType="msTransition",void 0===e.msTransform&&(t.animType=!1)),void 0!==e.transform&&!1!==t.animType&&(t.animType="transform",t.transformType="transform",t.transitionType="transition"),t.transformsEnabled=t.options.useTransform&&null!==t.animType&&!1!==t.animType},r.prototype.setSlideClasses=function(t){var e,i,o,n,s=this;if(i=s.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),s.$slides.eq(t).addClass("slick-current"),!0===s.options.centerMode){var r=s.options.slidesToShow%2==0?1:0;e=Math.floor(s.options.slidesToShow/2),!0===s.options.infinite&&(e<=t&&t<=s.slideCount-1-e?s.$slides.slice(t-e+r,t+e+1).addClass("slick-active").attr("aria-hidden","false"):(o=s.options.slidesToShow+t,i.slice(o-e+1+r,o+e+2).addClass("slick-active").attr("aria-hidden","false")),0===t?i.eq(i.length-1-s.options.slidesToShow).addClass("slick-center"):t===s.slideCount-1&&i.eq(s.options.slidesToShow).addClass("slick-center")),s.$slides.eq(t).addClass("slick-center")}else 0<=t&&t<=s.slideCount-s.options.slidesToShow?s.$slides.slice(t,t+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=s.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(n=s.slideCount%s.options.slidesToShow,o=!0===s.options.infinite?s.options.slidesToShow+t:t,s.options.slidesToShow==s.options.slidesToScroll&&s.slideCount-t<s.options.slidesToShow?i.slice(o-(s.options.slidesToShow-n),o+n).addClass("slick-active").attr("aria-hidden","false"):i.slice(o,o+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==s.options.lazyLoad&&"anticipated"!==s.options.lazyLoad||s.lazyLoad()},r.prototype.setupInfinite=function(){var t,e,i,o=this;if(!0===o.options.fade&&(o.options.centerMode=!1),!0===o.options.infinite&&!1===o.options.fade&&(e=null,o.slideCount>o.options.slidesToShow)){for(i=!0===o.options.centerMode?o.options.slidesToShow+1:o.options.slidesToShow,t=o.slideCount;t>o.slideCount-i;t-=1)e=t-1,c(o.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e-o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");for(t=0;t<i+o.slideCount;t+=1)e=t,c(o.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e+o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");o.$slideTrack.find(".slick-cloned").find("[id]").each(function(){c(this).attr("id","")})}},r.prototype.interrupt=function(t){t||this.autoPlay(),this.interrupted=t},r.prototype.selectHandler=function(t){var e=c(t.target).is(".slick-slide")?c(t.target):c(t.target).parents(".slick-slide"),i=parseInt(e.attr("data-slick-index"));i=i||0,this.slideCount<=this.options.slidesToShow?this.slideHandler(i,!1,!0):this.slideHandler(i)},r.prototype.slideHandler=function(t,e,i){var o,n,s,r,a,l=null,c=this;if(e=e||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===t))if(!1===e&&c.asNavFor(t),o=t,l=c.getLeft(o),r=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?r:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(t<0||t>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(o=c.currentSlide,!0!==i?c.animateSlide(r,function(){c.postSlide(o)}):c.postSlide(o));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(t<0||t>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(o=c.currentSlide,!0!==i?c.animateSlide(r,function(){c.postSlide(o)}):c.postSlide(o));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),n=o<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+o:o>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:o-c.slideCount:o,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,n]),s=c.currentSlide,c.currentSlide=n,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(a=(a=c.getNavTarget()).slick("getSlick")).slideCount<=a.options.slidesToShow&&a.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==i?(c.fadeSlideOut(s),c.fadeSlide(n,function(){c.postSlide(n)})):c.postSlide(n),void c.animateHeight();!0!==i?c.animateSlide(l,function(){c.postSlide(n)}):c.postSlide(n)}},r.prototype.startLoad=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.hide(),t.$nextArrow.hide()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.hide(),t.$slider.addClass("slick-loading")},r.prototype.swipeDirection=function(){var t,e,i,o,n=this;return t=n.touchObject.startX-n.touchObject.curX,e=n.touchObject.startY-n.touchObject.curY,i=Math.atan2(e,t),(o=Math.round(180*i/Math.PI))<0&&(o=360-Math.abs(o)),o<=45&&0<=o?!1===n.options.rtl?"left":"right":o<=360&&315<=o?!1===n.options.rtl?"left":"right":135<=o&&o<=225?!1===n.options.rtl?"right":"left":!0===n.options.verticalSwiping?35<=o&&o<=135?"down":"up":"vertical"},r.prototype.swipeEnd=function(t){var e,i,o=this;if(o.dragging=!1,o.swiping=!1,o.scrolling)return o.scrolling=!1;if(o.interrupted=!1,o.shouldClick=!(10<o.touchObject.swipeLength),void 0===o.touchObject.curX)return!1;if(!0===o.touchObject.edgeHit&&o.$slider.trigger("edge",[o,o.swipeDirection()]),o.touchObject.swipeLength>=o.touchObject.minSwipe){switch(i=o.swipeDirection()){case"left":case"down":e=o.options.swipeToSlide?o.checkNavigable(o.currentSlide+o.getSlideCount()):o.currentSlide+o.getSlideCount(),o.currentDirection=0;break;case"right":case"up":e=o.options.swipeToSlide?o.checkNavigable(o.currentSlide-o.getSlideCount()):o.currentSlide-o.getSlideCount(),o.currentDirection=1}"vertical"!=i&&(o.slideHandler(e),o.touchObject={},o.$slider.trigger("swipe",[o,i]))}else o.touchObject.startX!==o.touchObject.curX&&(o.slideHandler(o.currentSlide),o.touchObject={})},r.prototype.swipeHandler=function(t){var e=this;if(!(!1===e.options.swipe||"ontouchend"in document&&!1===e.options.swipe||!1===e.options.draggable&&-1!==t.type.indexOf("mouse")))switch(e.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,!0===e.options.verticalSwiping&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),t.data.action){case"start":e.swipeStart(t);break;case"move":e.swipeMove(t);break;case"end":e.swipeEnd(t)}},r.prototype.swipeMove=function(t){var e,i,o,n,s,r,a=this;return s=void 0!==t.originalEvent?t.originalEvent.touches:null,!(!a.dragging||a.scrolling||s&&1!==s.length)&&(e=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==s?s[0].pageX:t.clientX,a.touchObject.curY=void 0!==s?s[0].pageY:t.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),r=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&4<r?!(a.scrolling=!0):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=r),i=a.swipeDirection(),void 0!==t.originalEvent&&4<a.touchObject.swipeLength&&(a.swiping=!0,t.preventDefault()),n=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(n=a.touchObject.curY>a.touchObject.startY?1:-1),o=a.touchObject.swipeLength,(a.touchObject.edgeHit=!1)===a.options.infinite&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(o=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=e+o*n:a.swipeLeft=e+o*(a.$list.height()/a.listWidth)*n,!0===a.options.verticalSwiping&&(a.swipeLeft=e+o*n),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},r.prototype.swipeStart=function(t){var e,i=this;if(i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow)return!(i.touchObject={});void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==e?e.pageX:t.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==e?e.pageY:t.clientY,i.dragging=!0},r.prototype.unfilterSlides=r.prototype.slickUnfilter=function(){var t=this;null!==t.$slidesCache&&(t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.appendTo(t.$slideTrack),t.reinit())},r.prototype.unload=function(){var t=this;c(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},r.prototype.unslick=function(t){this.$slider.trigger("unslick",[this,t]),this.destroy()},r.prototype.updateArrows=function(){var t=this;Math.floor(t.options.slidesToShow/2),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&!t.options.infinite&&(t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===t.currentSlide?(t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):t.currentSlide>=t.slideCount-t.options.slidesToShow&&!1===t.options.centerMode?(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):t.currentSlide>=t.slideCount-1&&!0===t.options.centerMode&&(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},r.prototype.updateDots=function(){var t=this;null!==t.$dots&&(t.$dots.find("li").removeClass("slick-active").end(),t.$dots.find("li").eq(Math.floor(t.currentSlide/t.options.slidesToScroll)).addClass("slick-active"))},r.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},c.fn.slick=function(){var t,e,i=this,o=arguments[0],n=Array.prototype.slice.call(arguments,1),s=i.length;for(t=0;t<s;t++)if("object"==typeof o||void 0===o?i[t].slick=new r(i[t],o):e=i[t].slick[o].apply(i[t].slick,n),void 0!==e)return e;return i}}),function(z){"use strict";var R='<?xml version="1.0" encoding="utf-8"?><svg version="1.1"xmlns="http://www.w3.org/2000/svg"viewBox="0 12.705 512 486.59"x="0px" y="0px"xml:space="preserve"><polygon points="256.814,12.705 317.205,198.566 512.631,198.566 354.529,313.435 414.918,499.295 256.814,384.427 98.713,499.295 159.102,313.435 1,198.566 196.426,198.566 "/></svg>',o={starWidth:"32px",normalFill:"gray",ratedFill:"#f39c12",numStars:5,maxValue:5,precision:1,rating:0,fullStar:!1,halfStar:!1,readOnly:!1,spacing:"0px",rtl:!1,multiColor:null,onInit:null,onChange:null,onSet:null,starSvg:null},B={startColor:"#c0392b",endColor:"#f1c40f"};function U(t,e,i){return t===e?t=e:t===i&&(t=i),t}function X(t){return void 0!==t}var i=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i,V=function(t){if(!i.test(t))return null;var e=i.exec(t);return{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}};function Y(t,e,i){var o=i/100*(e-t);return 1===(o=Math.round(t+o).toString(16)).length&&(o="0"+o),o}function G(s,u){this.node=s.get(0);var i=this;s.empty().addClass("jq-ry-container");var f,o,m,g,v,t,e=z("<div/>").addClass("jq-ry-group-wrapper").appendTo(s),y=z("<div/>").addClass("jq-ry-normal-group").addClass("jq-ry-group").appendTo(e),n=z("<div/>").addClass("jq-ry-rated-group").addClass("jq-ry-group").appendTo(e),_=0,r=u.rating,a=!1;function l(t){X(t)||(t=u.rating);var e=(r=t)/f,i=e*m;1<e&&(i+=(Math.ceil(e)-1)*v),x(u.ratedFill),(i=u.rtl?100-i:i)<0?i=0:100<i&&(i=100),n.css("width",i+"%")}function c(){t=o*u.numStars+g*(u.numStars-1),m=o/t*100,v=g/t*100,s.width(t),l()}function d(t){var e=u.starWidth=t;return o=window.parseFloat(u.starWidth.replace("px","")),y.find("svg").attr({width:u.starWidth,height:e}),n.find("svg").attr({width:u.starWidth,height:e}),c(),s}function p(t){return u.spacing=t,g=parseFloat(u.spacing.replace("px","")),y.find("svg:not(:first-child)").css({"margin-left":t}),n.find("svg:not(:first-child)").css({"margin-left":t}),c(),s}function h(t){return u.normalFill=t,(u.rtl?n:y).find("svg").attr({fill:u.normalFill}),s}var b=u.ratedFill;function x(t){if(u.multiColor){var e=(r-_)/u.maxValue*100,i=u.multiColor||{};t=function(t,e,i){if(!t||!e)return null;i=X(i)?i:0,t=V(t),e=V(e);var o=Y(t.r,e.r,i),n=Y(t.b,e.b,i);return"#"+o+Y(t.g,e.g,i)+n}(i.startColor||B.startColor,i.endColor||B.endColor,e)}else b=t;return u.ratedFill=t,(u.rtl?y:n).find("svg").attr({fill:u.ratedFill}),s}function w(t){t=!!t,u.rtl=t,h(u.normalFill),l()}function k(t){x((u.multiColor=t)||b)}function T(t){u.numStars=t,f=u.maxValue/u.numStars,y.empty(),n.empty();for(var e=0;e<u.numStars;e++)y.append(z(u.starSvg||R)),n.append(z(u.starSvg||R));return d(u.starWidth),h(u.normalFill),p(u.spacing),l(),s}function S(t){return u.maxValue=t,f=u.maxValue/u.numStars,u.rating>t&&j(t),l(),s}function $(t){return u.precision=t,j(u.rating),s}function C(t){return u.halfStar=t,s}function A(t){return u.fullStar=t,s}function E(t){var e,i,o,n,s,r=y.offset().left,a=r+y.width(),l=u.maxValue,c=t.pageX,d=0;if(c<r)d=_;else if(a<c)d=l;else{var p=(c-r)/(a-r);if(0<g)for(var h=p*=100;0<h;)m<h?(d+=f,h-=m+v):(d+=h/m*f,h=0);else d=p*u.maxValue;i=(e=d)%f,o=f/2,n=u.halfStar,((s=u.fullStar)||n)&&(s||n&&o<i?e+=f-i:(e-=i,0<i&&(e+=o))),d=e}return u.rtl&&(d=l-d),parseFloat(d)}function D(t){return u.readOnly=t,s.attr("readonly",!0),W(),t||(s.removeAttr("readonly"),s.on("mousemove",L).on("mouseenter",L).on("mouseleave",M).on("click",F).on("rateyo.init",H).on("rateyo.change",q).on("rateyo.set",I)),s}function j(t){var e=t,i=u.maxValue;return"string"==typeof e&&("%"===e[e.length-1]&&(e=e.substr(0,e.length-1),S(i=100)),e=parseFloat(e)),function(){if(!(_<=e&&e<=i))throw Error("Invalid Rating, expected value between "+_+" and "+i)}(),e=parseFloat(e.toFixed(u.precision)),U(parseFloat(e),_,i),u.rating=e,l(),a&&s.trigger("rateyo.set",{rating:e}),s}function N(t){return u.onInit=t,s}function P(t){return u.onSet=t,s}function O(t){return u.onChange=t,s}function L(t){var e=E(t).toFixed(u.precision),i=u.maxValue;l(e=U(parseFloat(e),_,i)),s.trigger("rateyo.change",{rating:e})}function M(){var t,e;e=!1,t=navigator.userAgent||navigator.vendor||window.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)))&&(e=!0),e||(l(),s.trigger("rateyo.change",{rating:u.rating}))}function F(t){var e=E(t).toFixed(u.precision);e=parseFloat(e),i.rating(e)}function H(t,e){u.onInit&&"function"==typeof u.onInit&&u.onInit.apply(this,[e.rating,i])}function q(t,e){u.onChange&&"function"==typeof u.onChange&&u.onChange.apply(this,[e.rating,i])}function I(t,e){u.onSet&&"function"==typeof u.onSet&&u.onSet.apply(this,[e.rating,i])}function W(){s.off("mousemove",L).off("mouseenter",L).off("mouseleave",M).off("click",F).off("rateyo.init",H).off("rateyo.change",q).off("rateyo.set",I)}this.rating=function(t){return X(t)?(j(t),s):u.rating},this.destroy=function(){var o,n;return u.readOnly||W(),G.prototype.collection=(o=s.get(0),n=this.collection,z.each(n,function(t){if(o===this.node){var e=n.slice(0,t),i=n.slice(t+1,n.length);return n=e.concat(i),!1}}),n),s.removeClass("jq-ry-container").children().remove(),s},this.method=function(t){if(!t)throw Error("Method name not specified!");if(!X(this[t]))throw Error("Method "+t+" doesn't exist!");var e=Array.prototype.slice.apply(arguments,[]).slice(1);return this[t].apply(this,e)},this.option=function(t,e){if(!X(t))return u;var i;switch(t){case"starWidth":i=d;break;case"numStars":i=T;break;case"normalFill":i=h;break;case"ratedFill":i=x;break;case"multiColor":i=k;break;case"maxValue":i=S;break;case"precision":i=$;break;case"rating":i=j;break;case"halfStar":i=C;break;case"fullStar":i=A;break;case"readOnly":i=D;break;case"spacing":i=p;break;case"rtl":i=w;break;case"onInit":i=N;break;case"onSet":i=P;break;case"onChange":i=O;break;default:throw Error("No such option as "+t)}return X(e)?i(e):u[t]},T(u.numStars),D(u.readOnly),u.rtl&&w(u.rtl),this.collection.push(this),this.rating(u.rating,!0),a=!0,s.trigger("rateyo.init",{rating:u.rating})}function c(t,e){var i;return z.each(e,function(){if(t===this.node)return i=this,!1}),i}G.prototype.collection=[],window.RateYo=G,z.fn.rateYo=function(){return function(i){var s=G.prototype.collection,t=z(this);if(0===t.length)return t;var e=Array.prototype.slice.apply(arguments,[]);if(0===e.length)i=e[0]={};else{if(1!==e.length||"object"!=typeof e[0]){if(1<=e.length&&"string"==typeof e[0]){var r=e[0],a=e.slice(1),l=[];return z.each(t,function(t,e){var i=c(e,s);if(!i)throw Error("Trying to set options before even initialization");var o=i[r];if(!o)throw Error("Method "+r+" does not exist!");var n=o.apply(i,a);l.push(n)}),l=1===l.length?l[0]:l}throw Error("Invalid Arguments")}i=e[0]}return i=z.extend({},o,i),z.each(t,function(){var t=c(this,s);if(t)return t;var e=z(this),o={},n=z.extend({},i);return z.each(e.data(),function(t,e){if(0===t.indexOf("rateyo")){var i=t.replace(/^rateyo/,"");i=i[0].toLowerCase()+i.slice(1),o[i]=e,delete n[i]}}),new G(z(this),z.extend({},o,n))})}.apply(this,Array.prototype.slice.apply(arguments,[]))}}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
